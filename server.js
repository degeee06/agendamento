import express from "express";
import cors from "cors";
import { createClient } from "@supabase/supabase-js";
import { GoogleSpreadsheet } from "google-spreadsheet";

const PORT = process.env.PORT || 3000;
const app = express();
// ==================== CORS CONFIGURADO CORRETAMENTE ====================
app.use(cors({
  origin: [
    'https://frontrender-iota.vercel.app',
    'https://oubook.vercel.app',
    'http://localhost:3000',
    'http://localhost:5173',
    'https://localhost:3000'
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: [
    'Content-Type',
    'Authorization',
    'X-Requested-With',
    'Accept',
    'Origin',
    'Access-Control-Allow-Headers'
  ],
  exposedHeaders: ['Content-Length', 'Authorization'],
  preflightContinue: false,
  optionsSuccessStatus: 204,
  maxAge: 86400 // 24 hours
}));

// Handle preflight requests for ALL routes
app.options('*', cors());

// üî•üî•üî• AGORA SIM, O RESTO DO C√ìDIGO üî•üî•üî•
app.use(express.json());

app.post("/agendamento-publico", async (req, res) => {
  try {
    const { nome, email, telefone, data, horario, user_id, t } = req.body;
    
    if (!nome || !telefone || !data || !horario || !user_id || !t) {
      return res.status(400).json({ 
        success: false,
        msg: "Link inv√°lido ou expirado" 
      });
    }

    // üÜï üî• VALIDA√á√ÉO DE HORA CHEIA APENAS PARA P√öBLICO
    const minutos = horario.split(':')[1];
    if (minutos !== '00') {
        return res.status(400).json({ 
            success: false,
            msg: "Apenas hor√°rios de hora em hora s√£o permitidos (ex: 09:00, 10:00, 11:00)" 
        });
    }

    // ‚úÖ 1. PRIMEIRO VALIDA TUDO (sem incrementar uso)
    const validacaoHorario = await validarHorarioFuncionamento(user_id, data, horario);
    if (!validacaoHorario.valido) {
        return res.status(400).json({ 
            success: false,
            msg: `Hor√°rio indispon√≠vel: ${validacaoHorario.motivo}` 
        });
    }

    // üÜï VERIFICA√á√ÉO DE USO √öNICO (ANTES de incrementar)
    const { data: linkUsado } = await supabase
      .from('links_uso')
      .select('*')
      .eq('token', t)
      .eq('user_id', user_id)
      .single();

    if (linkUsado) {
      return res.status(400).json({ 
        success: false,
        msg: "Este link j√° foi utilizado. Solicite um novo link de agendamento." 
      });
    }

    // üÜï VERIFICA EXPIRA√á√ÉO (24 horas) - ANTES de incrementar
    const agora = Date.now();
    const diferenca = agora - parseInt(t);
    const horas = diferenca / (1000 * 60 * 60);
    
    if (horas > 24) {
      return res.status(400).json({ 
        success: false,
        msg: "Link expirado. Gere um novo link de agendamento." 
      });
    }

    // Verifica se o user_id existe
    const { data: user, error: userError } = await supabase.auth.admin.getUserById(user_id);
    if (userError || !user) {
      return res.status(400).json({ 
        success: false,
        msg: "Link inv√°lido" 
      });
    }

    // Verifica conflitos
    const { data: conflito } = await supabase
      .from("agendamentos")
      .select("*")
      .eq("user_id", user_id)
      .eq("data", data)
      .eq("horario", horario)
      .neq("status", "cancelado");
    
    if (conflito && conflito.length > 0) {
      return res.status(400).json({ 
        success: false,
        msg: "Hor√°rio indispon√≠vel" 
      });
    }

// ‚úÖ INCREMENTO CORRETO - USA APENAS daily_usage_count  
const trial = await getUserTrialBackend(user_id);
if (trial && trial.status === 'active') {
    const today = new Date().toISOString().split('T')[0];
    const lastUsageDate = trial.last_usage_date ? 
        new Date(trial.last_usage_date).toISOString().split('T')[0] : null;
    
    let dailyUsageCount = trial.daily_usage_count || 0;
    
    if (lastUsageDate !== today) {
        dailyUsageCount = 0;
    }
    
    const dailyLimit = trial.max_usages || 5;
    
    if (dailyUsageCount >= dailyLimit) {
        return res.status(400).json({ 
            success: false,
            msg: `Limite di√°rio atingido (${dailyLimit} usos).` 
        });
    }
    
    // ‚úÖ INCREMENTA APENAS daily_usage_count (COLUNA CORRETA)
    await supabase
        .from('user_trials')
        .update({
            daily_usage_count: dailyUsageCount + 1,
            last_usage_date: new Date().toISOString()
        })
        .eq('user_id', user_id);
        
    console.log(`‚úÖ daily_usage_count atualizado: ${dailyUsageCount} ‚Üí ${dailyUsageCount + 1}`);
}
    
    // ‚úÖ 3. CRIA O AGENDAMENTO (se chegou at√© aqui, tudo validado)
    const { data: novoAgendamento, error } = await supabase
      .from("agendamentos")
      .insert([{
        cliente: user_id,
        user_id: user_id,
        nome: nome,
        email: email || 'N√£o informado',
        telefone: telefone,
        data: data,
        horario: horario,
        status: "pendente",
        confirmado: false,
      }])
      .select()
      .single();

    if (error) throw error;

    // üÜï MARCA LINK COMO USADO (AP√ìS AGENDAMENTO BEM-SUCEDIDO)
    await supabase
      .from('links_uso')
      .insert([{
        user_id: user_id,
        token: t,
        usado_em: new Date(),
        agendamento_id: novoAgendamento.id
      }]);

    // Atualiza Google Sheets
    try {
      const doc = await accessUserSpreadsheet(user.user.email, user.user.user_metadata);
      if (doc) {
        const sheet = doc.sheetsByIndex[0];
        
        // üÜï DADOS FILTRADOS PARA SHEETS
        const dadosSheets = {
          nome: novoAgendamento.nome,
          email: email || 'N√£o informado',
          telefone: novoAgendamento.telefone,
          data: novoAgendamento.data,
          horario: novoAgendamento.horario,
          status: novoAgendamento.status
        };
        
        await ensureDynamicHeaders(sheet, Object.keys(dadosSheets));
        await sheet.addRow(dadosSheets);
        console.log('‚úÖ Dados filtrados salvos no Sheets');
      }
    } catch (sheetError) {
      console.error("Erro ao atualizar Google Sheets:", sheetError);
    }

    res.json({ 
      success: true, 
      msg: "Agendamento realizado com sucesso!", 
      agendamento: novoAgendamento 
    });

  } catch (err) {
    console.error("Erro no agendamento p√∫blico:", err);
    res.status(500).json({ 
      success: false,
      msg: "Erro interno no servidor" 
    });
  }
});

// ==================== CACHE SIMPLES E FUNCIONAL ====================
const cache = new Map(); // üî•üî•üî• ESTA LINHA ESTAVA FALTANDO!


const cacheManager = {
  set(key, value, ttl = 2 * 60 * 1000) {
    cache.set(key, {
      value,
      expiry: Date.now() + ttl
    });
  },

  get(key) {
    const item = cache.get(key);
    if (!item) return null;
    
    if (Date.now() > item.expiry) {
      cache.delete(key);
      return null;
    }
    
    return item.value;
  },

  async getOrSet(key, fetchFn, ttl = 2 * 60 * 1000) {
    const cached = this.get(key);
    if (cached) {
      console.log('üì¶ Cache hit:', key);
      return cached;
    }

    console.log('üîÑ Cache miss:', key);
    const value = await fetchFn();
    this.set(key, value, ttl);
    return value;
  },

  delete(key) {
    return cache.delete(key);
  },

  clear() {
    cache.clear();
  }
};

// ==================== CONFIGURA√á√ÉO DEEPSEEK IA ====================
const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
const DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions";

// Configura√ß√£o dos modelos
const MODELOS_IA = {
  PADRAO: "deepseek-chat",           // ‚úÖ Balanceado (atual)
  RACIOCINIO: "deepseek-reasoner",   // üéØ MELHOR para agendamentos
  ECONOMICO: "deepseek-chat"         // üí∞ Mais econ√¥mico
};


// Fun√ß√£o para chamar a API da DeepSeek
async function chamarDeepSeekIA(mensagem, contexto = "", tipo = "PADRAO") {
  try {
    if (!DEEPSEEK_API_KEY) {
      throw new Error("Chave da API DeepSeek n√£o configurada");
    }

    const modelo = MODELOS_IA[tipo] || MODELOS_IA.PADRAO;
    const prompt = contexto ? `${contexto}\n\nPergunta do usu√°rio: ${mensagem}` : mensagem;

    console.log(`ü§ñ Usando modelo: ${modelo} para: ${tipo}`);

    // üî• NOVO SYSTEM PROMPT COM LIMITES CLAROS
    const systemPrompt = contexto || `
Voc√™ √© um assistente de agenda INTELIGENTE mas com LIMITES CLAROS.

üìç SUAS FUN√á√ïES:
- Analisar agendamentos existentes
- Sugerir hor√°rios livres baseado na agenda
- Explicar estat√≠sticas e padr√µes
- Responder perguntas sobre compromissos

üö´ SUAS LIMITA√á√ïES (N√ÉO PODE):
- Confirmar, cancelar ou reagendar agendamentos
- Criar novos agendamentos diretamente
- Acessar fun√ß√µes do sistema
- Executar a√ß√µes no banco de dados

üí° COMO AJUDAR:
- "Vejo que tem hor√°rio livre √†s 14:00 na quarta-feira"
- "Sugiro verificar o formul√°rio de agendamento para esse hor√°rio"
- "Posso analisar sua agenda, mas voc√™ precisa usar o sistema para a√ß√µes"

Seja √∫til mas SEMPRE claro sobre suas limita√ß√µes. N√£o ofere√ßa funcionalidades que n√£o existem.
`;

    const response = await fetch(DEEPSEEK_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${DEEPSEEK_API_KEY}`
      },
      body: JSON.stringify({
        model: modelo,
        messages: [
          {
            role: "system",
            content: systemPrompt  // üî• USA O NOVO PROMPT
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 1000,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Erro na API DeepSeek: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    return data.choices[0].message.content;
  } catch (error) {
    console.error("Erro ao chamar DeepSeek IA:", error);
    throw error;
  }
}

// Fun√ß√£o para analisar estat√≠sticas pessoais
async function analisarEstatisticasPessoais(agendamentos, userEmail) {
  try {
    const estatisticas = {
      total: agendamentos.length,
      este_mes: agendamentos.filter(a => {
        const dataAgendamento = new Date(a.data);
        const agora = new Date();
        return dataAgendamento.getMonth() === agora.getMonth() && 
               dataAgendamento.getFullYear() === agora.getFullYear();
      }).length,
      confirmados: agendamentos.filter(a => a.status === 'confirmado').length,
      pendentes: agendamentos.filter(a => a.status === 'pendente').length,
      cancelados: agendamentos.filter(a => a.status === 'cancelado').length,
    };

    const contexto = `
Estat√≠sticas dos agendamentos do usu√°rio ${userEmail}

- Total de agendamentos: ${estatisticas.total}
- Agendamentos este m√™s: ${estatisticas.este_mes}
- Confirmados: ${estatisticas.confirmados}
- Pendentes: ${estatisticas.pendentes}
- Cancelados: ${estatisticas.cancelados}


Forne√ßa uma an√°lise inteligente sobre:
1. Comportamento de agendamento do usu√°rio
2. Taxa de comparecimento (confirmados vs total)
3. Distribui√ß√£o ao longo do tempo
4. Recomenda√ß√µes personalizadas

Seja encorajador e pr√°tico. M√°ximo de 200 palavras.
`;

    const analise = await chamarDeepSeekIA("Analise essas estat√≠sticas de agendamentos:", contexto);
    
    return {
      estatisticas,
      analise_ia: analise
    };
  } catch (error) {
    console.error("Erro ao analisar estat√≠sticas:", error);
    throw error;
  }
}

// ==================== ROTAS IA ====================

// Rota do assistente de IA - USE ECON√îMICO
app.post("/api/assistente-ia", authMiddleware, async (req, res) => {
  try {
    const { mensagem } = req.body;
    const userEmail = req.user.email;

    if (!mensagem) {
      return res.status(400).json({ success: false, msg: "Mensagem √© obrigat√≥ria" });
    }

    // Busca agendamentos recentes para contexto
    const { data: agendamentos, error } = await supabase
      .from("agendamentos")
      .select("*")
      .eq("cliente", req.userId)
      .order("data", { ascending: false })
      .limit(5);

    if (error) throw error;

    const contexto = agendamentos && agendamentos.length > 0 
      ? `Aqui est√£o os √∫ltimos agendamentos do usu√°rio para contexto:\n${agendamentos.map(a => `- ${a.data} ${a.horario}: ${a.nome} (${a.status})`).join('\n')}`
      : "O usu√°rio ainda n√£o tem agendamentos.";

    const resposta = await chamarDeepSeekIA(mensagem, contexto, "ECONOMICO"); // üí∞ USANDO ECON√îMICO

    res.json({
      success: true,
      resposta,
      agendamentos_referenciados: agendamentos?.length || 0
    });

  } catch (error) {
    console.error("Erro no assistente IA:", error);
    res.status(500).json({ 
      success: false, 
      msg: "Erro ao processar pergunta com IA",
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});



// üî• SUBSTITUIR: Nova fun√ß√£o com bloqueios RECORRENTES + DATA ESPEC√çFICA
async function validarHorarioFuncionamento(userId, data, horario) {
  try {
    const perfil = await obterHorariosPerfil(userId);
    
    if (!perfil) {
      return { valido: true }; // Sem perfil, aceita qualquer hor√°rio
    }

    // Converte data para dia da semana
    const dataObj = new Date(data);
    const diasSemana = ['domingo', 'segunda', 'terca', 'quarta', 'quinta', 'sexta', 'sabado'];
    const diaSemana = diasSemana[dataObj.getDay()];

    // üéØ 1. VERIFICA SE O DIA EST√Å NOS DIAS DE FUNCIONAMENTO
    if (!perfil.dias_funcionamento.includes(diaSemana)) {
      return { 
        valido: false, 
        motivo: `N√£o atendemos aos ${diaSemana}s` 
      };
    }

    // üéØ 2. VERIFICA SE O HOR√ÅRIO EST√Å DENTRO DO FUNCIONAMENTO
    const horarioFuncionamento = perfil.horarios_funcionamento[diaSemana];
    if (!horarioFuncionamento) {
      return { valido: true }; // Dia sem configura√ß√£o espec√≠fica
    }

    if (horario < horarioFuncionamento.inicio || horario >= horarioFuncionamento.fim) {
      return { 
        valido: false, 
        motivo: `Hor√°rio fora do funcionamento (${horarioFuncionamento.inicio} - ${horarioFuncionamento.fim})` 
      };
    }

    // üéØ 3. üî• ATUALIZADO: VERIFICA BLOQUEIOS MISTOS (RECORRENTES + DATA ESPEC√çFICA)
    if (perfil.horarios_bloqueados && perfil.horarios_bloqueados.length > 0) {
      const horarioCompleto = `${data}T${horario}`;
      const dataHorarioAgendamento = new Date(horarioCompleto);
      
      for (const periodo of perfil.horarios_bloqueados) {
        // üÜï VERIFICA TIPO DE BLOQUEIO
        let estaBloqueado = false;
        let motivo = '';
        
        if (periodo.tipo === 'recorrente') {
          // ‚úÖ BLOQUEIO RECORRENTE: Aplica para TODOS os dias
          const inicioPeriodo = new Date(`${data}T${periodo.inicio}`);
          const fimPeriodo = new Date(`${data}T${periodo.fim}`);
          
          if (dataHorarioAgendamento >= inicioPeriodo && dataHorarioAgendamento < fimPeriodo) {
            estaBloqueado = true;
            motivo = `Hor√°rio dentro do per√≠odo bloqueado recorrente (${periodo.inicio} - ${periodo.fim})`;
          }
        } 
        else if (periodo.tipo === 'data_especifica' && periodo.data === data) {
          // ‚úÖ BLOQUEIO POR DATA: Aplica apenas para data espec√≠fica
          const inicioPeriodo = new Date(`${data}T${periodo.inicio}`);
          const fimPeriodo = new Date(`${data}T${periodo.fim}`);
          
          if (dataHorarioAgendamento >= inicioPeriodo && dataHorarioAgendamento < fimPeriodo) {
            estaBloqueado = true;
            motivo = `Hor√°rio dentro do per√≠odo bloqueado (${periodo.inicio} - ${periodo.fim})`;
          }
        }
        // ‚úÖ SE N√ÉO TEM TIPO (COMPATIBILIDADE): Assume data_especifica
        else if (!periodo.tipo && periodo.data === data) {
          const inicioPeriodo = new Date(`${data}T${periodo.inicio}`);
          const fimPeriodo = new Date(`${data}T${periodo.fim}`);
          
          if (dataHorarioAgendamento >= inicioPeriodo && dataHorarioAgendamento < fimPeriodo) {
            estaBloqueado = true;
            motivo = `Hor√°rio dentro do per√≠odo bloqueado (${periodo.inicio} - ${periodo.fim})`;
          }
        }
        
        if (estaBloqueado) {
          return { valido: false, motivo };
        }
      }
    }

    return { valido: true };
  } catch (error) {
    console.error("Erro ao validar hor√°rio:", error);
    return { valido: true }; // Em caso de erro, permite o agendamento
  }
}

// ==================== ROTA SUGERIR HOR√ÅRIOS ====================

// Substitua a rota /api/sugerir-horarios por esta vers√£o atualizada
app.get("/api/sugerir-horarios", authMiddleware, async (req, res) => {
  try {
    const userEmail = req.user.email;

    const { data: agendamentos, error } = await supabase
      .from("agendamentos")
      .select("*")
      .eq("cliente", req.userId)
      .gte("data", new Date().toISOString().split('T')[0])
      .order("data", { ascending: true })
      .order("horario", { ascending: true });

    if (error) throw error;

    // üÜï USA A NOVA FUN√á√ÉO COM PERFIL
    const sugestoes = await analisarHorariosLivresComPerfil(agendamentos || [], userEmail, req.userId);

    res.json({
      success: true,
      sugestoes: sugestoes,
      total_agendamentos: agendamentos?.length || 0
    });

  } catch (error) {
    console.error("Erro ao sugerir hor√°rios:", error);
    res.status(500).json({ 
      success: false, 
      msg: "Erro ao analisar hor√°rios livres"
    });
  }
});

async function analisarHorariosLivresComPerfil(agendamentos, userEmail, userId) {
  try {
    const perfil = await obterHorariosPerfil(userId);
    
    let contexto = `
AN√ÅLISE DE AGENDA - SUGERIR HOR√ÅRIOS LIVRES

Dados da agenda do usu√°rio ${userEmail}:

AGENDAMENTOS EXISTENTES (pr√≥ximos 7 dias):
${agendamentos.length > 0 ? 
    agendamentos.map(a => `- ${a.data} ${a.horario}: ${a.nome}`).join('\n') 
    : 'Nenhum agendamento futuro encontrado.'
}
`;

    // Adiciona informa√ß√µes do perfil se existir
    if (perfil) {
      contexto += `

CONFIGURA√á√ÉO DO NEG√ìCIO:
- Hor√°rios de funcionamento: ${JSON.stringify(perfil.horarios_funcionamento)}
- Dias de funcionamento: ${perfil.dias_funcionamento.join(', ')}

IMPORTANTE: Sugira apenas hor√°rios dentro do funcionamento do neg√≥cio!
`;
    } else {
      contexto += `

OBSERVA√á√ÉO: Neg√≥cio n√£o configurado. Use hor√°rios comerciais padr√£o (9h-18h).
`;
    }

    contexto += `

DATA ATUAL: ${new Date().toISOString().split('T')[0]}

INSTRU√á√ïES:
Analise a agenda acima e sugira os MELHORES hor√°rios livres para os pr√≥ximos 7 dias.
${perfil ? 'RESPEITE os hor√°rios de funcionamento configurados!' : 'Use hor√°rios comerciais padr√£o (9h-18h).'}

FORMATO DA RESPOSTA:
Forne√ßa uma lista de 3-5 sugest√µes de hor√°rios no formato:
"üìÖ [DIA] √†s [HOR√ÅRIO] - [CONTEXTO/SUGEST√ÉO]"

Seja pr√°tico, √∫til e use emojis. M√°ximo de 150 palavras.
`;

    return await chamarDeepSeekIA("Analise esta agenda e sugira os melhores hor√°rios livres:", contexto, "ECONOMICO");
  } catch (error) {
    console.error("Erro na an√°lise de hor√°rios com perfil:", error);
    return "üìÖ **Sugest√µes de Hor√°rios:**\n\nConsidere configurar seu hor√°rio de funcionamento para sugest√µes personalizadas.";
  }
}

// Rota de sugest√µes inteligentes
app.get("/api/sugestoes-inteligentes", authMiddleware, async (req, res) => {
  try {
    const userEmail = req.user.email;
    const cacheKey = `sugestoes_${req.userId}`;

    const resultado = await cacheManager.getOrSet(cacheKey, async () => {
      // Busca todos os agendamentos
      const { data: agendamentos, error } = await supabase
        .from("agendamentos")
        .select("*")
        .eq("cliente", req.userId)
        .order("data", { ascending: true });


      if (error) throw error;

      if (!agendamentos || agendamentos.length === 0) {
        return {
          sugestoes: "üìù Voc√™ ainda n√£o tem agendamentos. Que tal agendar seu primeiro compromisso? Use o agendamento por IA para facilitar!",
          total_agendamentos: 0
        };
      }

      const sugestoes = await gerarSugestoesInteligentes(agendamentos, userEmail);

      return {
        sugestoes,
        total_agendamentos: agendamentos.length
      };
    }, 10 * 60 * 1000); // Cache de 10 minutos para sugest√µes

    res.json({
      success: true,
      ...resultado
    });

  } catch (error) {
    console.error("Erro nas sugest√µes inteligentes:", error);
    res.status(500).json({ 
      success: false, 
      msg: "Erro ao gerar sugest√µes inteligentes",
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// Rota de estat√≠sticas pessoais com IA
app.get("/api/estatisticas-pessoais", authMiddleware, async (req, res) => {
  try {
    const userEmail = req.user.email;
    const cacheKey = `estatisticas_${req.userId}`;

    const resultado = await cacheManager.getOrSet(cacheKey, async () => {
      // Busca todos os agendamentos
      const { data: agendamentos, error } = await supabase
        .from("agendamentos")
        .select("*")
        .eq("cliente", req.userId);

      if (error) throw error;

      return await analisarEstatisticasPessoais(agendamentos || [], userEmail);
    }, 5 * 60 * 1000); // Cache de 5 minutos para estat√≠sticas

    res.json({
      success: true,
      ...resultado
    });

  } catch (error) {
    console.error("Erro nas estat√≠sticas pessoais:", error);
    res.status(500).json({ 
      success: false, 
      msg: "Erro ao gerar estat√≠sticas pessoais",
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});


const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

let creds;
try {
  creds = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT);
} catch (e) {
  console.error("Erro ao parsear GOOGLE_SERVICE_ACCOUNT:", e);
  process.exit(1);
}



// üéØ FUN√á√ÉO CORRIGIDA: Usa dados REAIS sem precisar do userId
async function gerarSugestoesInteligentes(agendamentos, perfilInfo) {
  const hoje = new Date();
  const diasAnalise = 7;
  
  // üéØ AGRUPA AGENDAMENTOS POR DATA (REAIS)
  const agendamentosPorData = {};
  agendamentos.forEach(ag => {
    if (!agendamentosPorData[ag.data]) {
      agendamentosPorData[ag.data] = [];
    }
    agendamentosPorData[ag.data].push(ag.horario);
  });

  // üéØ ANALISA CADA DIA COM DADOS REAIS
  const diasAnalisados = [];

  for (let i = 0; i < diasAnalise; i++) {
    const data = new Date(hoje);
    data.setDate(hoje.getDate() + i);
    const dataStr = data.toISOString().split('T')[0];
    
    // üéØ CONVERTE PARA DIA DA SEMANA
    const diasSemana = ['domingo', 'segunda', 'terca', 'quarta', 'quinta', 'sexta', 'sabado'];
    const diaSemanaPortugues = diasSemana[data.getDay()];
    
    // üî• VERIFICA SE O DIA √â DE FUNCIONAMENTO
    const diaFuncionamento = perfilInfo?.dias_funcionamento?.includes(diaSemanaPortugues);
    
    if (!diaFuncionamento) {
      continue; // Pula dias sem atendimento
    }

    const agendamentosDoDia = agendamentosPorData[dataStr] || [];
    
    // üéØ CALCULA DISPONIBILIDADE REAL BASEADA NOS AGENDAMENTOS EXISTENTES
    const horarioFuncionamento = perfilInfo.horarios_funcionamento[diaSemanaPortugues];
    let horariosDisponiveisReais = [];
    
    if (horarioFuncionamento) {
      // üéØ GERA HOR√ÅRIOS POSS√çVEIS BASEADO NO PERFIL (sem buscar do Supabase)
      horariosDisponiveisReais = gerarHorariosIntervaloBackend(
        horarioFuncionamento.inicio, 
        horarioFuncionamento.fim, 
        60 // Horas cheias apenas
      ).filter(horario => {
        // Remove hor√°rios j√° agendados
        return !agendamentosDoDia.includes(horario);
      });
    }

    const diaInfo = {
      data: dataStr,
      dataFormatada: data.toLocaleDateString('pt-BR'),
      diaSemana: data.toLocaleDateString('pt-BR', { weekday: 'long' }),
      agendamentosOcupados: agendamentosDoDia.length,
      horariosDisponiveis: horariosDisponiveisReais.length,
      horariosDisponiveisLista: horariosDisponiveisReais.slice(0, 3), // Primeiros 3 hor√°rios
      ocupacao: horariosDisponiveisReais.length === 0 ? 100 : Math.round((agendamentosDoDia.length / (agendamentosDoDia.length + horariosDisponiveisReais.length)) * 100)
    };

    diasAnalisados.push(diaInfo);
  }

  // üéØ ORDENA POR DISPONIBILIDADE (mais hor√°rios livres primeiro)
  diasAnalisados.sort((a, b) => b.horariosDisponiveis - a.horariosDisponiveis);

  // üéØ GERA SUGEST√ïES BASEADAS NA REALIDADE
  return gerarTextoRecomendacoesReais(diasAnalisados, perfilInfo);
}

async function accessUserSpreadsheet(userEmail, userMetadata) {
  try {
    const spreadsheetId = userMetadata?.spreadsheet_id;
    
    if (!spreadsheetId) {
      console.log(`üìù Usu√°rio ${userEmail} n√£o configurou Sheets`); // ‚úÖ Use userEmail
      return null;
    }
    
    const doc = new GoogleSpreadsheet(spreadsheetId);
    await doc.useServiceAccountAuth(creds);
    await doc.loadInfo();
    
    console.log(`‚úÖ Acessando planilha do usu√°rio: ${userEmail}`); // ‚úÖ Use userEmail
    return doc;
  } catch (error) {
    console.error(`‚ùå Erro ao acessar planilha do usu√°rio ${userEmail}:`, error.message); // ‚úÖ Use userEmail
    return null;
  }
}

async function createSpreadsheetForUser(userEmail, userName) {
  try {
    console.log('üîß Iniciando cria√ß√£o de planilha para:', userEmail);
    
    const doc = new GoogleSpreadsheet();
    await doc.useServiceAccountAuth(creds);
    
    await doc.createNewSpreadsheetDocument({
      title: `Agendamentos - ${userName || userEmail}`.substring(0, 100),
    });
    
    console.log('üìä Planilha criada, ID:', doc.spreadsheetId);
    
    const sheet = doc.sheetsByIndex[0];
    await sheet.setHeaderRow([
      'id', 'nome', 'email', 'telefone', 'data', 'horario', 'status', 'confirmado', 'created_at', 'descricao'
    ]);
    
    try {
      await doc.shareWithEmail(userEmail, {
        role: 'writer',
        emailMessage: 'Planilha de agendamentos compartilhada com voc√™!'
      });
      console.log('‚úÖ Planilha compartilhada com:', userEmail);
    } catch (shareError) {
      console.warn('‚ö†Ô∏è N√£o foi poss√≠vel compartilhar a planilha:', shareError.message);
    }
    
    console.log(`üìä Nova planilha criada para ${userEmail}: ${doc.spreadsheetId}`); // ‚úÖ Use userEmail
    return doc.spreadsheetId;
    
  } catch (error) {
    console.error("‚ùå Erro ao criar planilha:", error);
    throw new Error(`Falha ao criar planilha: ${error.message}`);
  }
}

async function ensureDynamicHeaders(sheet, newKeys) {
  await sheet.loadHeaderRow().catch(async () => await sheet.setHeaderRow(newKeys));
  const currentHeaders = sheet.headerValues || [];
  const headersToAdd = newKeys.filter((k) => !currentHeaders.includes(k));
  if (headersToAdd.length > 0) {
    await sheet.setHeaderRow([...currentHeaders, ...headersToAdd]);
  }
}

async function updateRowInSheet(sheet, rowId, updatedData) {
  if (!sheet) return;
  
  await sheet.loadHeaderRow();
  const rows = await sheet.getRows();
  const row = rows.find(r => r.id === rowId);
  
  // üÜï FILTRA APENAS OS CAMPOS DESEJADOS
  const dadosFiltrados = {
    nome: updatedData.nome,
    email: updatedData.email || '',
    telefone: updatedData.telefone,
    data: updatedData.data,
    horario: updatedData.horario,
    status: updatedData.status
  };
  
  if (row) {
    Object.keys(dadosFiltrados).forEach(key => {
      if (sheet.headerValues.includes(key)) row[key] = dadosFiltrados[key];
    });
    await row.save();
  } else {
    await ensureDynamicHeaders(sheet, Object.keys(dadosFiltrados));
    await sheet.addRow(dadosFiltrados);
  }
}

// ---------------- MIDDLEWARE AUTH ----------------
async function authMiddleware(req, res, next) {
  const token = req.headers["authorization"]?.split("Bearer ")[1];
  if (!token) return res.status(401).json({ msg: "Token n√£o enviado" });

  const { data, error } = await supabase.auth.getUser(token);
  if (error || !data.user) return res.status(401).json({ msg: "Token inv√°lido" });

  req.user = data.user;
  req.userId = data.user.id;
  next();
}

// ==================== HEALTH CHECKS OTIMIZADOS ====================
app.get("/health", (req, res) => {
  res.json({ 
    status: "OK", 
    message: "Backend rodando com otimiza√ß√µes e IA",
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    ia_configurada: !!DEEPSEEK_API_KEY
  });
});

// Novo endpoint para warm-up (para o teu ping)
app.get("/warmup", async (req, res) => {
  try {
    const { data, error } = await supabase.from('agendamentos').select('count').limit(1);
    
    res.json({ 
      status: "WARM", 
      timestamp: new Date().toISOString(),
      supabase: error ? "offline" : "online",
      ia: DEEPSEEK_API_KEY ? "configurada" : "n√£o configurada"
    });
  } catch (error) {
    res.json({ 
      status: "COLD", 
      timestamp: new Date().toISOString(),
      error: error.message 
    });
  }
});

// ==================== ROTAS COM CACHE CORRIGIDAS ====================

// üî• AGENDAMENTOS COM CACHE
app.get("/agendamentos", authMiddleware, async (req, res) => {
  try {
    const userEmail = req.user.email;
    const cacheKey = `agendamentos_${req.userId}`;
    
    const agendamentos = await cacheManager.getOrSet(cacheKey, async () => {
      console.log('üîÑ Buscando agendamentos do DB para:', userEmail);
      const { data, error } = await supabase
        .from("agendamentos")
        .select("*")
       .eq("cliente", req.userId)
        .order("data", { ascending: true })
        .order("horario", { ascending: true });

      if (error) throw error;
      return data;
    });

    res.json({ agendamentos });
  } catch (err) {
    console.error("Erro ao listar agendamentos:", err);
    res.status(500).json({ msg: "Erro interno" });
  }
});

// üî• CONFIGURA√á√ÉO SHEETS COM CACHE
app.get("/configuracao-sheets", authMiddleware, async (req, res) => {
  try {
    const userEmail = req.user.email;
    const cacheKey = `config_${req.userId}`;
    
    const config = await cacheManager.getOrSet(cacheKey, async () => {
      return {
        temSheetsConfigurado: !!req.user.user_metadata?.spreadsheet_id,
        spreadsheetId: req.user.user_metadata?.spreadsheet_id
      };
    }, 5 * 60 * 1000);
    
    console.log(`üìä Configura√ß√£o do usu√°rio ${req.userId}:`, config);
    res.json(config);
    
  } catch (err) {
    console.error("Erro ao verificar configura√ß√£o:", err);
    res.status(500).json({ msg: "Erro interno" });
  }
});

// üî• CONFIGURAR SHEETS COM INVALIDA√á√ÉO DE CACHE
app.post("/configurar-sheets", authMiddleware, async (req, res) => {
  try {
    const { spreadsheetId, criarAutomatico } = req.body;
    const userEmail = req.user.email;
    
    console.log('üîß Configurando Sheets para:', userEmail, { spreadsheetId, criarAutomatico });
    
    let finalSpreadsheetId = spreadsheetId;

    if (criarAutomatico) {
      console.log('üîß Criando planilha autom√°tica para:', userEmail);
      finalSpreadsheetId = await createSpreadsheetForUser(userEmail, req.user.user_metadata?.name);
      console.log('‚úÖ Planilha criada com ID:', finalSpreadsheetId);
    }

    if (!finalSpreadsheetId) {
      return res.status(400).json({ msg: "Spreadsheet ID √© obrigat√≥rio" });
    }

    try {
      console.log('üîß Verificando acesso √† planilha:', finalSpreadsheetId);
      const doc = new GoogleSpreadsheet(finalSpreadsheetId);
      await doc.useServiceAccountAuth(creds);
      await doc.loadInfo();
      console.log('‚úÖ Planilha acess√≠vel:', doc.title);
    } catch (accessError) {
      console.error('‚ùå Erro ao acessar planilha:', accessError.message);
      return res.status(400).json({ 
        msg: "N√£o foi poss√≠vel acessar a planilha. Verifique o ID e as permiss√µes." 
      });
    }

    const { data: updatedUser, error: updateError } = await supabase.auth.admin.updateUserById(
      req.user.id,
      { 
        user_metadata: { 
          ...req.user.user_metadata,
          spreadsheet_id: finalSpreadsheetId 
        } 
      }
    );

    if (updateError) {
      console.error('‚ùå Erro ao atualizar usu√°rio:', updateError);
      throw updateError;
    }

    console.log('‚úÖ Usu√°rio atualizado com sucesso:', updatedUser.user.email);
    
    // üî• INVALIDA CACHE CORRETAMENTE
    cacheManager.delete(`config_${req.userId}`);
    cacheManager.delete(`agendamentos_${req.userId}`);
    
    console.log('‚úÖ Sheets configurado com sucesso para:', userEmail);
    
    res.json({ 
      msg: criarAutomatico ? "‚úÖ Planilha criada e configurada com sucesso!" : "‚úÖ Spreadsheet configurado com sucesso!",
      spreadsheetId: finalSpreadsheetId
    });

  } catch (err) {
    console.error("‚ùå Erro ao configurar sheets:", err);
    res.status(500).json({ 
      msg: "Erro interno do servidor",
      details: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
});
// üî• FUN√á√ÉO AUXILIAR: Verifica se usu√°rio pode gerenciar agendamento
function usuarioPodeGerenciarAgendamento(agendamento, userId) {
  // ‚úÖ Pode gerenciar se:
  // 1. √â o dono do agendamento (cliente) OU
  // 2. √â o dono do link que criou o agendamento (user_id) OU  
  // 3. √â um administrador (se quiser implementar depois)
  return agendamento.cliente === userId || 
         agendamento.user_id === userId;
}


app.post("/agendar", authMiddleware, async (req, res) => {
  try {
    const { Nome, Email, Telefone, Data, Horario } = req.body;
    
    if (!Nome || !Telefone || !Data || !Horario)
      return res.status(400).json({ msg: "Todos os campos obrigat√≥rios" });

    // ‚úÖ 1. PRIMEIRO VALIDA TUDO (sem incrementar uso)
    
    // Valida data no passado
    const dataAgendamento = new Date(`${Data}T${Horario}`);
    const agora = new Date();
    if (dataAgendamento < agora) {
      return res.status(400).json({ 
        success: false,
        msg: "N√£o √© poss√≠vel agendar no passado" 
      });
    }
    
    // Valida hor√°rio de funcionamento
    const validacaoHorario = await validarHorarioFuncionamento(req.userId, Data, Horario);
    if (!validacaoHorario.valido) {
      return res.status(400).json({ 
        msg: `Hor√°rio indispon√≠vel: ${validacaoHorario.motivo}` 
      });
    }
    
    // Verifica conflitos
    const cacheKey = `agendamentos_${req.userId}`;
    const agendamentosExistentes = await cacheManager.getOrSet(cacheKey, async () => {
      const { data, error } = await supabase
        .from("agendamentos")
        .select("*")
        .eq("cliente", req.userId)
        .order("data", { ascending: true })
        .order("horario", { ascending: true });

      if (error) throw error;
      return data || [];
    });

    const conflito = agendamentosExistentes.find(a => 
      a.data === Data && a.horario === Horario && a.status !== "cancelado"
    );
    
    if (conflito) {
      return res.status(400).json({ 
        msg: "Voc√™ j√° possui um agendamento para esta data e hor√°rio" 
      });
    }

// ‚úÖ INCREMENTO CORRETO - USA APENAS daily_usage_count
const trial = await getUserTrialBackend(req.userId);
if (trial && trial.status === 'active') {
    const today = new Date().toISOString().split('T')[0];
    const lastUsageDate = trial.last_usage_date ? 
        new Date(trial.last_usage_date).toISOString().split('T')[0] : null;
    
    let dailyUsageCount = trial.daily_usage_count || 0;
    
    if (lastUsageDate !== today) {
        dailyUsageCount = 0;
    }
    
    const dailyLimit = trial.max_usages || 5;
    
    if (dailyUsageCount >= dailyLimit) {
        return res.status(400).json({ 
            success: false,
            msg: `Limite di√°rio atingido (${dailyLimit} usos).` 
        });
    }
    
    // ‚úÖ INCREMENTA APENAS daily_usage_count (COLUNA CORRETA)
    await supabase
        .from('user_trials')
        .update({
            daily_usage_count: dailyUsageCount + 1,
            last_usage_date: new Date().toISOString()
        })
        .eq('user_id', req.userId);
        
    console.log(`‚úÖ daily_usage_count atualizado: ${dailyUsageCount} ‚Üí ${dailyUsageCount + 1}`);
}

    // ‚úÖ 3. CRIA O AGENDAMENTO (se chegou at√© aqui, tudo validado)
    const userEmail = req.user?.email || Email || null;
    
    const { data: novoAgendamento, error } = await supabase
      .from("agendamentos")
      .insert([{
        cliente: req.userId,
        user_id: req.userId,
        nome: Nome,
        email: Email || null,
        telefone: Telefone,
        data: Data,
        horario: Horario,
        status: "pendente",
        confirmado: false,
      }])
      .select()
      .single();

    if (error) throw error;

    // Atualiza Google Sheets
    try {
      const doc = await accessUserSpreadsheet(userEmail, req.user.user_metadata);
      if (doc) {
        const sheet = doc.sheetsByIndex[0];
        
        const dadosSheets = {
          nome: novoAgendamento.nome,
          email: Email || '',
          telefone: novoAgendamento.telefone,
          data: novoAgendamento.data,
          horario: novoAgendamento.horario,
          status: novoAgendamento.status
        };
        
        await ensureDynamicHeaders(sheet, Object.keys(dadosSheets));
        await sheet.addRow(dadosSheets);
        console.log(`‚úÖ Agendamento salvo na planilha do usu√°rio ${req.userId}`);
      }
    } catch (sheetError) {
      console.error("Erro ao atualizar Google Sheets:", sheetError);
    }

    // üî• INVALIDA CACHE PARA FOR√áAR ATUALIZA√á√ÉO
    cacheManager.delete(cacheKey);
    
    res.json({ 
      success: true,
      msg: "Agendamento realizado com sucesso!", 
      agendamento: novoAgendamento 
    });

  } catch (err) {
    console.error("Erro no /agendar:", err);
    res.status(500).json({ 
      success: false,
      msg: "Erro interno no servidor" 
    });
  }
});



// üÜï FUN√á√ÉO: Buscar trial do usu√°rio (BACKEND)
async function getUserTrialBackend(userId) {
    try {
        const { data, error } = await supabase
            .from('user_trials')
            .select('*')
            .eq('user_id', userId)
            .order('created_at', { ascending: false })
            .limit(1)
            .single();
            
        if (error) {
            if (error.code === 'PGRST116') return null;
            throw error;
        }
        
        return data;
    } catch (error) {
        console.error('‚ùå Erro ao buscar trial (backend):', error);
        return null;
    }
}

// üÜï FUN√á√ÉO: Verificar uso di√°rio (BACKEND)  
async function getDailyUsageBackend(trial, dailyLimit) {
    if (!trial) return { dailyUsageCount: 0, dailyUsagesLeft: 0, lastUsageDate: null };
    
    const today = new Date().toISOString().split('T')[0];
    const lastUsageDate = trial.last_usage_date ? new Date(trial.last_usage_date).toISOString().split('T')[0] : null;
    
    let dailyUsageCount = trial.daily_usage_count || 0;
    
    // Reset di√°rio se for um novo dia
    if (lastUsageDate !== today) {
        dailyUsageCount = 0;
    }
    
    const dailyUsagesLeft = Math.max(0, dailyLimit - dailyUsageCount);
    
    return {
        dailyUsageCount: dailyUsageCount,
        dailyUsagesLeft: dailyUsagesLeft,
        lastUsageDate: lastUsageDate
    };
}

// üî• CONFIRMAR AGENDAMENTO CORRIGIDO
app.post("/agendamentos/:email/confirmar/:id", authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const userEmail = req.user.email;
    
    console.log('‚úÖ Confirmando agendamento ID:', id, 'por usu√°rio:', userEmail, 'userId:', req.userId);

    // ‚úÖ BUSCA O AGENDAMENTO SEM FILTRAR POR CLIENTE
    const { data: agendamento, error: fetchError } = await supabase
      .from("agendamentos")
      .select("*")
      .eq("id", id)
      .single();

    if (fetchError || !agendamento) {
      return res.status(404).json({ msg: "Agendamento n√£o encontrado" });
    }

    console.log('üìã Agendamento encontrado:', {
      id: agendamento.id,
      cliente: agendamento.cliente,
      user_id: agendamento.user_id,
      nome: agendamento.nome
    });

    // ‚úÖ VERIFICA SE USU√ÅRIO TEM PERMISS√ÉO
    if (!usuarioPodeGerenciarAgendamento(agendamento, req.userId)) {
      return res.status(403).json({ 
        msg: "Voc√™ n√£o tem permiss√£o para confirmar este agendamento" 
      });
    }

    // ‚úÖ ATUALIZA SEM FILTRAR POR CLIENTE (j√° verificamos permiss√£o)
    const { data, error } = await supabase.from("agendamentos")
      .update({ 
        confirmado: true, 
        status: "confirmado",
      })
      .eq("id", id)
      .select()
      .single();
    
    if (error) throw error;
    if (!data) return res.status(404).json({ msg: "Agendamento n√£o encontrado" });

    // Atualiza Google Sheets
    try {
      const doc = await accessUserSpreadsheet(userEmail, req.user.user_metadata);
      if (doc) {
        const dadosFiltrados = {
  nome: data.nome,
  email: data.email || '',
  telefone: data.telefone,
  data: data.data,
  horario: data.horario,
  status: data.status
};
await updateRowInSheet(doc.sheetsByIndex[0], id, dadosFiltrados);
      }
    } catch (sheetError) {
      console.error("Erro ao atualizar Google Sheets:", sheetError);
    }

    // üî• INVALIDA CACHE DE AMBOS OS USU√ÅRIOS
    cacheManager.delete(`agendamentos_${req.userId}`);
    if (agendamento.cliente && agendamento.cliente !== req.userId) {
      cacheManager.delete(`agendamentos_${agendamento.cliente}`);
    }
    
    res.json({ 
      msg: "Agendamento confirmado com sucesso!", 
      agendamento: data 
    });
  } catch (err) {
    console.error("Erro ao confirmar agendamento:", err);
    res.status(500).json({ msg: "Erro interno" });
  }
});


// üî• CANCELAR AGENDAMENTO CORRIGIDO
app.post("/agendamentos/:email/cancelar/:id", authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const userEmail = req.user.email;
    
    console.log('‚ùå Cancelando agendamento ID:', id, 'por usu√°rio:', userEmail, 'userId:', req.userId);

    // ‚úÖ BUSCA O AGENDAMENTO SEM FILTRAR POR CLIENTE
    const { data: agendamento, error: fetchError } = await supabase
      .from("agendamentos")
      .select("*")
      .eq("id", id)
      .single();

    if (fetchError || !agendamento) {
      return res.status(404).json({ msg: "Agendamento n√£o encontrado" });
    }

    console.log('üìã Agendamento encontrado:', {
      id: agendamento.id,
      cliente: agendamento.cliente,
      user_id: agendamento.user_id,
      nome: agendamento.nome
    });

    // ‚úÖ VERIFICA SE USU√ÅRIO TEM PERMISS√ÉO
    if (!usuarioPodeGerenciarAgendamento(agendamento, req.userId)) {
      return res.status(403).json({ 
        msg: "Voc√™ n√£o tem permiss√£o para cancelar este agendamento" 
      });
    }

    // ‚úÖ ATUALIZA SEM FILTRAR POR CLIENTE (j√° verificamos permiss√£o)
    const { data, error } = await supabase.from("agendamentos")
      .update({ 
        status: "cancelado", 
        confirmado: false,
      })
      .eq("id", id)
      .select()
      .single();
    
    if (error) throw error;
    if (!data) return res.status(404).json({ msg: "Agendamento n√£o encontrado" });

    // Atualiza Google Sheets
    try {
      const doc = await accessUserSpreadsheet(userEmail, req.user.user_metadata);
      if (doc) {
       const dadosFiltrados = {
  nome: data.nome,
  email: data.email || '',
  telefone: data.telefone,
  data: data.data,
  horario: data.horario,
  status: data.status
};
await updateRowInSheet(doc.sheetsByIndex[0], id, dadosFiltrados);
      }
    } catch (sheetError) {
      console.error("Erro ao atualizar Google Sheets:", sheetError);
    }

    // üî• INVALIDA CACHE DE AMBOS OS USU√ÅRIOS
    cacheManager.delete(`agendamentos_${req.userId}`);
    if (agendamento.cliente && agendamento.cliente !== req.userId) {
      cacheManager.delete(`agendamentos_${agendamento.cliente}`);
    }
    
    res.json({ 
      msg: "Agendamento cancelado com sucesso!", 
      agendamento: data 
    });
  } catch (err) {
    console.error("Erro ao cancelar agendamento:", err);
    res.status(500).json({ msg: "Erro interno" });
  }
});


// üî• REAGENDAR AGENDAMENTO CORRIGIDO
app.post("/agendamentos/:email/reagendar/:id", authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const { novaData, novoHorario } = req.body;
    const userEmail = req.user.email;
    
    if (!novaData || !novoHorario) return res.status(400).json({ msg: "Data e hor√°rio obrigat√≥rios" });

    console.log('üîÑ Reagendando agendamento ID:', id, 'por usu√°rio:', userEmail, 'userId:', req.userId);

    // ‚úÖ BUSCA O AGENDAMENTO SEM FILTRAR POR CLIENTE (igual aos outros endpoints)
    const { data: agendamento, error: fetchError } = await supabase
      .from("agendamentos")
      .select("*")
      .eq("id", id)
      .single();

    if (fetchError || !agendamento) {
      return res.status(404).json({ msg: "Agendamento n√£o encontrado" });
    }

    console.log('üìã Agendamento encontrado:', {
      id: agendamento.id,
      cliente: agendamento.cliente,
      user_id: agendamento.user_id,
      nome: agendamento.nome
    });

    // ‚úÖ VERIFICA SE USU√ÅRIO TEM PERMISS√ÉO (igual aos outros endpoints)
    if (!usuarioPodeGerenciarAgendamento(agendamento, req.userId)) {
      return res.status(403).json({ 
        msg: "Voc√™ n√£o tem permiss√£o para reagendar este agendamento" 
      });
    }

    // ‚úÖ VERIFICA CONFLITO DIRETAMENTE NO BANCO (corrigido)
    const { data: conflito, error: conflitoError } = await supabase
      .from("agendamentos")
      .select("id")
      .eq("data", novaData)
      .eq("horario", novoHorario)
      .neq("id", id)
      .single();

    if (conflito && !conflitoError) {
      return res.status(400).json({ 
        msg: "J√° existe um agendamento para esta nova data e hor√°rio" 
      });
    }

    // ‚úÖ ATUALIZA SEM FILTRAR POR CLIENTE (j√° verificamos permiss√£o)
    const { data, error } = await supabase.from("agendamentos")
      .update({ 
        data: novaData,
        horario: novoHorario,
        status: "pendente",
        confirmado: false
      })
      .eq("id", id)
      .select()
      .single();
    
    if (error) throw error;
    if (!data) return res.status(404).json({ msg: "Agendamento n√£o encontrado" });

    // Atualiza Google Sheets
    try {
      const doc = await accessUserSpreadsheet(userEmail, req.user.user_metadata);
      if (doc) {
        const dadosFiltrados = {
  nome: data.nome,
  email: data.email || '',
  telefone: data.telefone,
  data: data.data,
  horario: data.horario,
  status: data.status
};
await updateRowInSheet(doc.sheetsByIndex[0], id, dadosFiltrados);
      }
    } catch (sheetError) {
      console.error("Erro ao atualizar Google Sheets:", sheetError);
    }

    // üî• INVALIDA CACHE DE AMBOS OS USU√ÅRIOS (igual aos outros endpoints)
    cacheManager.delete(`agendamentos_${req.userId}`);
    if (agendamento.cliente && agendamento.cliente !== req.userId) {
      cacheManager.delete(`agendamentos_${agendamento.cliente}`);
    }
    
    res.json({ 
      msg: "Agendamento reagendado com sucesso!", 
      agendamento: data 
    });
  } catch (err) {
    console.error("Erro ao reagendar agendamento:", err);
    res.status(500).json({ msg: "Erro interno" });
  }
});

// Rota para criar/atualizar perfil
// üî• ATUALIZAR: Rota para criar/atualizar perfil com hor√°rios_bloqueados
app.post("/api/criar-perfil", authMiddleware, async (req, res) => {
  try {
    const { 
      nome_negocio, 
      tipo_negocio, 
      horarios_funcionamento, 
      dias_funcionamento,
      horarios_bloqueados = [] // üÜï Campo novo para per√≠odos bloqueados
    } = req.body;
    
    if (!nome_negocio || !tipo_negocio || !horarios_funcionamento || !dias_funcionamento) {
      return res.status(400).json({ msg: "Todos os campos s√£o obrigat√≥rios" });
    }

    // Verifica se j√° existe perfil
    const { data: perfilExistente } = await supabase
      .from("perfis_negocio")
      .select("*")
      .eq("user_id", req.userId)
      .single();

    let resultado;
    
    if (perfilExistente) {
      // Atualiza perfil existente
      const { data, error } = await supabase
        .from("perfis_negocio")
        .update({
          nome_negocio,
          tipo_negocio,
          horarios_funcionamento,
          dias_funcionamento,
          horarios_bloqueados, // üÜï Inclui per√≠odos bloqueados
          updated_at: new Date()
        })
        .eq("user_id", req.userId)
        .select()
        .single();
      
      if (error) throw error;
      resultado = data;
    } else {
      // Cria novo perfil
      const { data, error } = await supabase
        .from("perfis_negocio")
        .insert([{
          user_id: req.userId,
          nome_negocio,
          tipo_negocio,
          horarios_funcionamento,
          dias_funcionamento,
          horarios_bloqueados // üÜï Inclui per√≠odos bloqueados
        }])
        .select()
        .single();
      
      if (error) throw error;
      resultado = data;
    }

    // Invalida cache
    cacheManager.delete(`perfil_${req.userId}`);
    
    res.json({
      success: true,
      msg: perfilExistente ? "Perfil atualizado com sucesso!" : "Perfil criado com sucesso!",
      perfil: resultado
    });

  } catch (error) {
    console.error("Erro ao criar perfil:", error);
    res.status(500).json({ msg: "Erro interno" });
  }
});

// üéØ ROTA INTELIGENTE - CACHE APENAS QUANDO TEM PERFIL
app.get("/api/meu-perfil", authMiddleware, async (req, res) => {
  try {
    const { forcado } = req.query;
    const cacheKey = `perfil_${req.userId}`;
    
    // Se for√ßado, limpa cache
    if (forcado) {
      cacheManager.delete(cacheKey);
    }
    
    // üÜï CONSULTA DIRETA SEM CACHE MANAGER
    console.log('üì° Consulta DIRETA ao banco (cache ignorado)');
    const { data, error } = await supabase
      .from("perfis_negocio")
      .select("*")
      .eq("user_id", req.userId)
      .single();

    if (error && error.code !== 'PGRST116') throw error;
    
    const perfil = data || null;
    
    console.log('üìä Resultado REAL:', perfil ? `Perfil ${perfil.id}` : 'SEM PERFIL');
    
    res.json({
      success: true,
      perfil: perfil,
      cache: false, // üÜï Sempre false agora
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error("Erro ao buscar perfil:", error);
    res.status(500).json({ msg: "Erro interno" });
  }
});

// ==================== FUN√á√ÉO AUXILIAR: Obter hor√°rios do perfil ====================

// üî• ATUALIZAR: Fun√ß√£o para obter hor√°rios do perfil incluindo bloqueados
async function obterHorariosPerfil(userId) {
  try {
    const cacheKey = `perfil_${userId}`;
    
    const perfil = await cacheManager.getOrSet(cacheKey, async () => {
      const { data, error } = await supabase
        .from("perfis_negocio")
        .select("horarios_funcionamento, dias_funcionamento, horarios_bloqueados") // üÜï Inclui bloqueados
        .eq("user_id", userId)
        .single();

      if (error && error.code !== 'PGRST116') throw error;
      return data;
    }, 10 * 60 * 1000);

    return perfil;
  } catch (error) {
    console.error("Erro ao obter hor√°rios do perfil:", error);
    return null;
  }
}

// üî• ADICIONE ESTA ROTA NO SEU BACKEND (app.js)
app.get("/api/perfil-publico/:user_id", async (req, res) => {
    try {
        const { user_id } = req.params;
        
        // Busca perfil REAL da tabela perfis_negocio
        const { data: perfil, error } = await supabase
            .from("perfis_negocio")
            .select("*")
            .eq("user_id", user_id)
            .single();

        if (error && error.code !== 'PGRST116') throw error;
        
        res.json({ 
            success: true, 
            perfil: perfil || null 
        });
        
    } catch (error) {
        console.error("Erro no perfil p√∫blico:", error);
        res.json({ success: true, perfil: null });
    }
});
// üî• SUBSTITUIR: Rota para hor√°rios dispon√≠veis com BLOQUEIOS MISTOS
app.get("/api/horarios-disponiveis/:user_id", async (req, res) => {
    try {
        const { user_id } = req.params;
        const { data } = req.query; // Data no formato YYYY-MM-DD
        
        if (!user_id || !data) {
            return res.status(400).json({ 
                success: false, 
                msg: "user_id e data s√£o obrigat√≥rios" 
            });
        }

        // üéØ 1. BUSCA PERFIL DO NEG√ìCIO
        const { data: perfil, error: perfilError } = await supabase
            .from("perfis_negocio")
            .select("horarios_funcionamento, dias_funcionamento, horarios_bloqueados")
            .eq("user_id", user_id)
            .single();

        if (perfilError && perfilError.code !== 'PGRST116') {
            console.error("Erro ao buscar perfil:", perfilError);
        }

        // Se n√£o tem perfil, retorna vazio
        if (!perfil) {
            return res.json({ 
                success: true, 
                horariosDisponiveis: [],
                motivo: "Perfil n√£o configurado"
            });
        }

        // üéØ 2. VERIFICA SE √â DIA DE FUNCIONAMENTO
        const dataObj = new Date(data);
        const diasSemana = ['domingo', 'segunda', 'terca', 'quarta', 'quinta', 'sexta', 'sabado'];
        const diaSemana = diasSemana[dataObj.getDay()];

        if (!perfil.dias_funcionamento.includes(diaSemana)) {
            return res.json({ 
                success: true, 
                horariosDisponiveis: [],
                motivo: `N√£o atendemos aos ${diaSemana}s`
            });
        }

        // üéØ 3. BUSCA HOR√ÅRIOS J√Å AGENDADOS NESTA DATA
        const { data: agendamentos, error: agendamentosError } = await supabase
            .from("agendamentos")
            .select("horario")
            .eq("user_id", user_id)
            .eq("data", data)
            .neq("status", "cancelado");

        if (agendamentosError) {
            console.error("Erro ao buscar agendamentos:", agendamentosError);
            return res.status(500).json({ 
                success: false, 
                msg: "Erro ao verificar agendamentos" 
            });
        }

        const horariosOcupados = agendamentos?.map(a => a.horario) || [];

        // üéØ 4. GERA HOR√ÅRIOS DISPON√çVEIS BASEADO NO PERFIL
        const horarioDia = perfil.horarios_funcionamento[diaSemana];
        if (!horarioDia) {
            return res.json({ 
                success: true, 
                horariosDisponiveis: [],
                motivo: "Hor√°rio n√£o configurado para este dia"
            });
        }

        // Gera todos hor√°rios poss√≠veis do dia
        const todosHorarios = gerarHorariosIntervalo(
            horarioDia.inicio, 
            horarioDia.fim, 
            30
        );

        // üéØ 5. üî• ATUALIZADO: FILTRA HOR√ÅRIOS BLOQUEADOS MISTOS
        let horariosDisponiveis = todosHorarios.filter(horario => {
            // Remove hor√°rios ocupados
            if (horariosOcupados.includes(horario)) {
                return false;
            }
            
            // üî• VERIFICA BLOQUEIOS MISTOS
            if (perfil.horarios_bloqueados && perfil.horarios_bloqueados.length > 0) {
                const horarioCompleto = `${data}T${horario}`;
                const dataHorario = new Date(horarioCompleto);
                
                for (const periodo of perfil.horarios_bloqueados) {
                    let estaBloqueado = false;
                    
                    // üÜï BLOQUEIO RECORRENTE (aplica para TODOS os dias)
                    if (periodo.tipo === 'recorrente') {
                        const inicioPeriodo = new Date(`${data}T${periodo.inicio}`);
                        const fimPeriodo = new Date(`${data}T${periodo.fim}`);
                        
                        if (dataHorario >= inicioPeriodo && dataHorario < fimPeriodo) {
                            estaBloqueado = true;
                        }
                    } 
                    // üÜï BLOQUEIO POR DATA (aplica apenas para data espec√≠fica)
                    else if (periodo.tipo === 'data_especifica' && periodo.data === data) {
                        const inicioPeriodo = new Date(`${data}T${periodo.inicio}`);
                        const fimPeriodo = new Date(`${data}T${periodo.fim}`);
                        
                        if (dataHorario >= inicioPeriodo && dataHorario < fimPeriodo) {
                            estaBloqueado = true;
                        }
                    }
                    // ‚úÖ COMPATIBILIDADE: Bloqueios antigos sem tipo (assume data_especifica)
                    else if (!periodo.tipo && periodo.data === data) {
                        const inicioPeriodo = new Date(`${data}T${periodo.inicio}`);
                        const fimPeriodo = new Date(`${data}T${periodo.fim}`);
                        
                        if (dataHorario >= inicioPeriodo && dataHorario < fimPeriodo) {
                            estaBloqueado = true;
                        }
                    }
                    
                    if (estaBloqueado) {
                        return false; // Hor√°rio bloqueado
                    }
                }
            }
            
            return true; // Hor√°rio dispon√≠vel
        });

        // üÜï SEPARA BLOQUEIOS POR TIPO PARA O FRONTEND
        const periodosBloqueadosEstaData = {
            recorrentes: [],
            data_especifica: []
        };

        if (perfil.horarios_bloqueados) {
            perfil.horarios_bloqueados.forEach(periodo => {
                if (periodo.tipo === 'recorrente') {
                    periodosBloqueadosEstaData.recorrentes.push(periodo);
                } 
                else if ((periodo.tipo === 'data_especifica' || !periodo.tipo) && periodo.data === data) {
                    periodosBloqueadosEstaData.data_especifica.push(periodo);
                }
            });
        }

        res.json({
            success: true,
            horariosDisponiveis: horariosDisponiveis,
            horariosOcupados: horariosOcupados,
            totalDisponiveis: horariosDisponiveis.length,
            totalOcupados: horariosOcupados.length,
            horarioFuncionamento: horarioDia,
            periodosBloqueados: periodosBloqueadosEstaData // üÜï Estrutura organizada
        });

    } catch (error) {
        console.error("Erro na rota hor√°rios-disponiveis:", error);
        res.status(500).json({ 
            success: false, 
            msg: "Erro interno ao verificar hor√°rios" 
        });
    }
});


// üÜï NOVA ROTA: Gerenciar hor√°rios bloqueados
app.post("/api/horarios-bloqueados", authMiddleware, async (req, res) => {
  try {
    const { horarios_bloqueados } = req.body;
    
    if (!Array.isArray(horarios_bloqueados)) {
      return res.status(400).json({ 
        success: false, 
        msg: "horarios_bloqueados deve ser um array" 
      });
    }

    // Verifica se j√° existe perfil
    const { data: perfilExistente } = await supabase
      .from("perfis_negocio")
      .select("id")
      .eq("user_id", req.userId)
      .single();

    if (!perfilExistente) {
      return res.status(400).json({ 
        success: false, 
        msg: "Crie um perfil do neg√≥cio primeiro" 
      });
    }

    // Atualiza apenas os hor√°rios bloqueados
    const { data, error } = await supabase
      .from("perfis_negocio")
      .update({
        horarios_bloqueados,
        updated_at: new Date()
      })
      .eq("user_id", req.userId)
      .select()
      .single();

    if (error) throw error;

    // Invalida cache
    cacheManager.delete(`perfil_${req.userId}`);
    
    res.json({
      success: true,
      msg: "Hor√°rios bloqueados atualizados com sucesso!",
      horarios_bloqueados: data.horarios_bloqueados
    });

  } catch (error) {
    console.error("Erro ao atualizar hor√°rios bloqueados:", error);
    res.status(500).json({ 
      success: false, 
      msg: "Erro interno" 
    });
  }
});


// üî• FUN√á√ÉO AUXILIAR - GERA HOR√ÅRIOS EM INTERVALO (J√Å EXISTE NO FRONT, ADICIONE NO BACKEND TAMB√âM)
function gerarHorariosIntervalo(inicio, fim, intervaloMinutos) {
    const horarios = [];
    const [horaInicio, minutoInicio] = inicio.split(':').map(Number);
    const [horaFim, minutoFim] = fim.split(':').map(Number);
    
    let horaAtual = horaInicio;
    let minutoAtual = minutoInicio;
    
    while (horaAtual < horaFim || (horaAtual === horaFim && minutoAtual < minutoFim)) {
        const horario = `${horaAtual.toString().padStart(2, '0')}:${minutoAtual.toString().padStart(2, '0')}`;
        horarios.push(horario);
        
        // Adiciona intervalo
        minutoAtual += intervaloMinutos;
        if (minutoAtual >= 60) {
            horaAtual += Math.floor(minutoAtual / 60);
            minutoAtual = minutoAtual % 60;
        }
    }
    
    return horarios;
}

// ‚úÖ WEBHOOK HOTMART CORRETO
app.post('/api/webhooks/hotmart', async (req, res) => {
    try {
        console.log('üîî Webhook Hotmart recebido:', req.body);
        
        const { event, data } = req.body;
        
        // ‚≠ê‚≠ê VALIDA√á√ÉO DE SEGURAN√áA (IMPORTANTE!)
        // Verificar se vem da Hotmart (opcional mas recomendado)
        // Voc√™ pode validar IPs ou usar assinatura
        
        console.log('üì¶ Evento:', event);
        console.log('üìä Dados:', JSON.stringify(data, null, 2));
        
        if (event === 'PURCHASE_APPROVED' || event === 'SUBSCRIPTION_ACTIVATED') {
            const buyer = data.buyer || data.subscriber;
            const subscription = data.subscription || data.plan;
            
            if (!buyer || !buyer.email) {
                console.log('‚ùå Email do comprador n√£o encontrado');
                return res.status(400).json({ error: 'Email do comprador n√£o encontrado' });
            }
            
            console.log('üéØ Ativando assinatura para:', buyer.email);
            
            // Criar/atualizar assinatura
            const { error } = await supabase
                .from('user_subscriptions')
                .upsert({
                    user_email: buyer.email,
                    hotmart_subscription_id: subscription?.subscription_code || `hotmart_${Date.now()}`,
                    plan_type: 'pro',
                    status: 'active',
                    max_daily_schedules: 999, // Ilimitado
                    starts_at: new Date().toISOString(),
                    ends_at: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 dias
                    updated_at: new Date().toISOString()
                }, {
                    onConflict: 'user_email'
                });
                
            if (error) {
                console.error('‚ùå Erro ao salvar no Supabase:', error);
                return res.status(500).json({ error: 'Erro ao salvar assinatura' });
            }
            
            console.log('‚úÖ Assinatura ativada/atualizada para:', buyer.email);
        }
        
        else if (event === 'SUBSCRIPTION_CANCELLED' || event === 'PURCHASE_REFUNDED') {
            const subscriber = data.subscriber || data.buyer;
            
            if (!subscriber || !subscriber.email) {
                console.log('‚ùå Email do assinante n√£o encontrado');
                return res.status(400).json({ error: 'Email do assinante n√£o encontrado' });
            }
            
            console.log('üõë Cancelando assinatura para:', subscriber.email);
            
            // Marcar assinatura como cancelada
            const { error } = await supabase
                .from('user_subscriptions')
                .update({
                    status: 'canceled',
                    ends_at: new Date().toISOString(),
                    updated_at: new Date().toISOString()
                })
                .eq('user_email', subscriber.email);
                
            if (error) {
                console.error('‚ùå Erro ao cancelar no Supabase:', error);
                return res.status(500).json({ error: 'Erro ao cancelar assinatura' });
            }
            
            console.log('‚úÖ Assinatura cancelada para:', subscriber.email);
        }
        
        else if (event === 'SUBSCRIPTION_EXPIRED') {
            const subscriber = data.subscriber;
            
            if (subscriber && subscriber.email) {
                console.log('üìÖ Assinatura expirada para:', subscriber.email);
                
                const { error } = await supabase
                    .from('user_subscriptions')
                    .update({
                        status: 'expired',
                        updated_at: new Date().toISOString()
                    })
                    .eq('user_email', subscriber.email);
                    
                if (error) console.error('Erro ao expirar assinatura:', error);
            }
        }
        
        else {
            console.log('‚ÑπÔ∏è Evento n√£o tratado:', event);
        }
        
        // ‚≠ê‚≠ê SEMPRE RESPONDA 200 PARA A HOTMART
        res.status(200).json({ 
            success: true, 
            message: 'Webhook processado com sucesso',
            event: event
        });
        
    } catch (error) {
        console.error('‚ùå Erro no webhook Hotmart:', error);
        // ‚≠ê‚≠ê IMPORTANTE: Mesmo com erro, responda 200 para a Hotmart
        res.status(200).json({ 
            success: false, 
            error: 'Erro interno mas webhook recebido' 
        });
    }
});

app.get("/gerar-link/:user_id", authMiddleware, async (req, res) => {
  try {
    const user_id = req.params.user_id;
    
    // Verifica se √© o pr√≥prio usu√°rio
    if (req.userId !== user_id) {
      return res.status(403).json({ msg: "N√£o autorizado" });
    }

    // ‚úÖ ADICIONE ESTA VERIFICA√á√ÉO DE LIMITE (ANTES de gerar o link)
    const trial = await getUserTrialBackend(user_id);
    if (trial && trial.status === 'active') {
      const dailyLimit = trial.max_usages || 5;
      const dailyUsage = await getDailyUsageBackend(trial, dailyLimit);
      
      // üö´ BLOQUEIA se n√£o tem usos dispon√≠veis
      if (dailyUsage.dailyUsagesLeft <= 0) {
        return res.status(400).json({ 
          success: false,
          msg: `Limite di√°rio atingido (${dailyLimit} usos). Os usos resetam √† meia-noite.` 
        });
      }
    }

    // üÜï ADICIONE TIMESTAMP AO LINK (expira em 24h)
    const timestamp = Date.now();
    const link = `https://oubook.vercel.app/agendar.html?user_id=${user_id}&t=${timestamp}`;
    
    res.json({ 
      success: true, 
      link: link,
      qr_code: `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(link)}`,
      expira_em: "24 horas" // üÜï Informa quando expira
    });

  } catch (error) {
    console.error("Erro ao gerar link:", error);
    res.status(500).json({ msg: "Erro interno" });
  }
});

// üî• NOVA FUN√á√ÉO: Atualizar estrutura da tabela perfis_negocio
async function atualizarEstruturaPerfis() {
  try {
    console.log('üîß Verificando estrutura da tabela perfis_negocio...');
    
    // Verifica se a coluna horarios_bloqueados existe
    const { data, error } = await supabase
      .from('perfis_negocio')
      .select('*')
      .limit(1);
    
    if (error) throw error;
    
    console.log('‚úÖ Estrutura atual da tabela:', Object.keys(data[0] || {}));
    
  } catch (error) {
    console.log('‚ÑπÔ∏è Estrutura da tabela:', error.message);
  }
}

// Chame esta fun√ß√£o no startup
atualizarEstruturaPerfis();
// ---------------- Error Handling ----------------
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ msg: "Algo deu errado!" });
});

app.use("*", (req, res) => {
  res.status(404).json({ msg: "Endpoint n√£o encontrado" });
});

app.listen(PORT, () => {
  console.log(`üöÄ Backend otimizado rodando na porta ${PORT}`);
  console.log('‚úÖ Cache em mem√≥ria ativo');
  console.log('‚úÖ Health checks otimizados');
  console.log('ü§ñ DeepSeek IA: ' + (DEEPSEEK_API_KEY ? 'CONFIGURADA' : 'N√ÉO CONFIGURADA'));
  console.log('üìä Use /health para status completo');
  console.log('üî• Use /warmup para manter inst√¢ncia ativa');
});

















































