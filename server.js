import express from "express";
import cors from "cors";
import { createClient } from "@supabase/supabase-js";
import { GoogleSpreadsheet } from "google-spreadsheet";

const PORT = process.env.PORT || 3000;
const app = express();
// ==================== CORS CONFIGURADO CORRETAMENTE ====================
app.use(cors({
  origin: [
    'https://frontrender-iota.vercel.app',
    'https://oubook.vercel.app',
    'http://localhost:3000',
    'http://localhost:5173',
    'https://localhost:3000'
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: [
    'Content-Type',
    'Authorization',
    'X-Requested-With',
    'Accept',
    'Origin',
    'Access-Control-Allow-Headers'
  ],
  exposedHeaders: ['Content-Length', 'Authorization'],
  preflightContinue: false,
  optionsSuccessStatus: 204,
  maxAge: 86400 // 24 hours
}));

// Handle preflight requests for ALL routes
app.options('*', cors());

// üî•üî•üî• AGORA SIM, O RESTO DO C√ìDIGO üî•üî•üî•
app.use(express.json());

// ROTA P√öBLICA para agendamento via link
app.post("/agendamento-publico", async (req, res) => {
  try {
    const { nome, email, telefone, data, horario, user_id } = req.body;
    
    if (!nome || !email || !telefone || !data || !horario || !user_id) {
      return res.status(400).json({ msg: "Todos os campos s√£o obrigat√≥rios" });
    }

    // Verifica se o user_id existe
    const { data: user, error: userError } = await supabase.auth.admin.getUserById(user_id);
    if (userError || !user) {
      return res.status(400).json({ msg: "Link inv√°lido" });
    }

    // Verifica conflitos
    const { data: conflito } = await supabase
      .from("agendamentos")
      .select("*")
      .eq("cliente", user_id)
      .eq("data", data)
      .eq("horario", horario);

    if (conflito && conflito.length > 0) {
      return res.status(400).json({ msg: "Hor√°rio indispon√≠vel" });
    }

    // Cria agendamento
    const { data: novoAgendamento, error } = await supabase
      .from("agendamentos")
      .insert([{
        cliente: user_id,
        user_id: user_id,
        nome: nome,
        email: email,
        telefone: telefone,
        data: data,
        horario: horario,
        status: "pendente",
        confirmado: false,
      }])
      .select()
      .single();

    if (error) throw error;

    // Atualiza Google Sheets
    try {
      const doc = await accessUserSpreadsheet(user.user.email, user.user.user_metadata);
      if (doc) {
        const sheet = doc.sheetsByIndex[0];
        await ensureDynamicHeaders(sheet, Object.keys(novoAgendamento));
        await sheet.addRow(novoAgendamento);
      }
    } catch (sheetError) {
      console.error("Erro ao atualizar Google Sheets:", sheetError);
    }

    res.json({ 
      success: true, 
      msg: "Agendamento realizado com sucesso!", 
      agendamento: novoAgendamento 
    });

  } catch (err) {
    console.error("Erro no agendamento p√∫blico:", err);
    res.status(500).json({ msg: "Erro interno no servidor" });
  }
});

// ROTA para gerar link √∫nico
app.get("/gerar-link/:user_id", authMiddleware, async (req, res) => {
  try {
    const user_id = req.params.user_id;
    
    // Verifica se √© o pr√≥prio usu√°rio
    if (req.userId !== user_id) {
      return res.status(403).json({ msg: "N√£o autorizado" });
    }

    const link = `https://oubook.vercel.app/agendar.html?user_id=${user_id}`;
    
    res.json({ 
      success: true, 
      link: link,
      qr_code: `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(link)}`
    });

  } catch (error) {
    console.error("Erro ao gerar link:", error);
    res.status(500).json({ msg: "Erro interno" });
  }
});

// ==================== CACHE SIMPLES E FUNCIONAL ====================
const cache = new Map(); // üî•üî•üî• ESTA LINHA ESTAVA FALTANDO!


const cacheManager = {
  set(key, value, ttl = 2 * 60 * 1000) {
    cache.set(key, {
      value,
      expiry: Date.now() + ttl
    });
  },

  get(key) {
    const item = cache.get(key);
    if (!item) return null;
    
    if (Date.now() > item.expiry) {
      cache.delete(key);
      return null;
    }
    
    return item.value;
  },

  async getOrSet(key, fetchFn, ttl = 2 * 60 * 1000) {
    const cached = this.get(key);
    if (cached) {
      console.log('üì¶ Cache hit:', key);
      return cached;
    }

    console.log('üîÑ Cache miss:', key);
    const value = await fetchFn();
    this.set(key, value, ttl);
    return value;
  },

  delete(key) {
    return cache.delete(key);
  },

  clear() {
    cache.clear();
  }
};

// ==================== CONFIGURA√á√ÉO DEEPSEEK IA ====================
const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
const DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions";

// Configura√ß√£o dos modelos
const MODELOS_IA = {
  PADRAO: "deepseek-chat",           // ‚úÖ Balanceado (atual)
  RACIOCINIO: "deepseek-reasoner",   // üéØ MELHOR para agendamentos
  ECONOMICO: "deepseek-chat"         // üí∞ Mais econ√¥mico
};

// Fun√ß√£o para chamar a API da DeepSeek
async function chamarDeepSeekIA(mensagem, contexto = "", tipo = "PADRAO") {
  try {
    if (!DEEPSEEK_API_KEY) {
      throw new Error("Chave da API DeepSeek n√£o configurada");
    }

    const modelo = MODELOS_IA[tipo] || MODELOS_IA.PADRAO;
    const prompt = contexto ? `${contexto}\n\nPergunta do usu√°rio: ${mensagem}` : mensagem;

    console.log(`ü§ñ Usando modelo: ${modelo} para: ${tipo}`);

    const response = await fetch(DEEPSEEK_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${DEEPSEEK_API_KEY}`
      },
      body: JSON.stringify({
        model: modelo,  // üî• AGORA VARI√ÅVEL
        messages: [
          {
            role: "system",
            content: contexto || "Voc√™ √© um assistente de agenda inteligente. Ajude os usu√°rios a gerenciarem seus compromissos de forma eficiente. Seja √∫til, amig√°vel e direto ao ponto."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 1000,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Erro na API DeepSeek: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    return data.choices[0].message.content;
  } catch (error) {
    console.error("Erro ao chamar DeepSeek IA:", error);
    throw error;
  }
}
async function analisarDescricaoNatural(descricao, userEmail) {
  try {
    const hoje = new Date();
    const amanha = new Date(hoje);
    amanha.setDate(amanha.getDate() + 1);

    // ‚úÖ AGORA DOMINGOS S√ÉO PERMITIDOS (n√£o h√° mais bloqueio)
    function calcularDataValida(data) {
      const dataObj = new Date(data);
      // ‚ö†Ô∏è REMOVIDO: A l√≥gica que pulava domingos foi retirada
      // Agora domingos s√£o tratados como dias normais da semana
      return dataObj.toISOString().split('T')[0];
    }

    const prompt = `
Analise a seguinte descri√ß√£o de agendamento e extraia as informa√ß√µes no formato JSON:

DESCRI√á√ÉO: "${descricao}"

USU√ÅRIO: ${userEmail}
DATA ATUAL: ${hoje.toISOString().split('T')[0]}

Extraia as seguintes informa√ß√µes:
- nome (string): Nome da pessoa ou evento
- data (string no formato YYYY-MM-DD): Data do compromisso
- horario (string no formato HH:MM): Hor√°rio do compromisso
- descricao (string): Descri√ß√£o detalhada do compromisso

üîî REGRAS IMPORTANTES:
- Se n√£o mencionar data espec√≠fica, use "${calcularDataValida(amanha.toISOString().split('T')[0])}"
- Se n√£o mencionar hor√°rio, use "09:00" (hor√°rio padr√£o)
- Para datas relativas: "hoje" = data atual, "amanh√£" = data atual + 1 dia
- Para dias da semana: converta para a pr√≥xima ocorr√™ncia
- ‚úÖ DOMINGOS S√ÉO PERMITIDOS: Agende normalmente para domingos
- Use o ano atual para todas as datas

Exemplo de resposta:
{"nome": "Reuni√£o com Jo√£o", "data": "2024-01-14", "horario": "14:00", "descricao": "Reuni√£o dominical"}

Responda APENAS com o JSON v√°lido, sem nenhum texto adicional.
`;

    const resposta = await chamarDeepSeekIA(prompt, "", "RACIOCINIO");
    
    // Tenta extrair JSON da resposta
    const jsonMatch = resposta.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      const dados = JSON.parse(jsonMatch[0]);
      
      // ‚úÖ REMOVIDO: A valida√ß√£o que corrigia domingos
      // Agora domingos s√£o aceitos normalmente
      
      console.log('‚úÖ Agendamento processado (domingos permitidos):', dados.data);
      return dados;
    }
    
    throw new Error("N√£o foi poss√≠vel extrair dados estruturados da descri√ß√£o");
  } catch (error) {
    console.error("Erro ao analisar descri√ß√£o natural:", error);
    throw error;
  }
}

// Fun√ß√£o para analisar estat√≠sticas pessoais
async function analisarEstatisticasPessoais(agendamentos, userEmail) {
  try {
    const estatisticas = {
      total: agendamentos.length,
      este_mes: agendamentos.filter(a => {
        const dataAgendamento = new Date(a.data);
        const agora = new Date();
        return dataAgendamento.getMonth() === agora.getMonth() && 
               dataAgendamento.getFullYear() === agora.getFullYear();
      }).length,
      confirmados: agendamentos.filter(a => a.status === 'confirmado').length,
      pendentes: agendamentos.filter(a => a.status === 'pendente').length,
      cancelados: agendamentos.filter(a => a.status === 'cancelado').length,
    };

    const contexto = `
Estat√≠sticas dos agendamentos do usu√°rio ${userEmail}

- Total de agendamentos: ${estatisticas.total}
- Agendamentos este m√™s: ${estatisticas.este_mes}
- Confirmados: ${estatisticas.confirmados}
- Pendentes: ${estatisticas.pendentes}
- Cancelados: ${estatisticas.cancelados}


Forne√ßa uma an√°lise inteligente sobre:
1. Comportamento de agendamento do usu√°rio
2. Taxa de comparecimento (confirmados vs total)
3. Distribui√ß√£o ao longo do tempo
4. Recomenda√ß√µes personalizadas

Seja encorajador e pr√°tico. M√°ximo de 200 palavras.
`;

    const analise = await chamarDeepSeekIA("Analise essas estat√≠sticas de agendamentos:", contexto);
    
    return {
      estatisticas,
      analise_ia: analise
    };
  } catch (error) {
    console.error("Erro ao analisar estat√≠sticas:", error);
    throw error;
  }
}

// ==================== ROTAS IA ====================

// Rota do assistente de IA - USE ECON√îMICO
app.post("/api/assistente-ia", authMiddleware, async (req, res) => {
  try {
    const { mensagem } = req.body;
    const userEmail = req.user.email;

    if (!mensagem) {
      return res.status(400).json({ success: false, msg: "Mensagem √© obrigat√≥ria" });
    }

    // Busca agendamentos recentes para contexto
    const { data: agendamentos, error } = await supabase
      .from("agendamentos")
      .select("*")
      .eq("cliente", req.userId)
      .order("data", { ascending: false })
      .limit(5);

    if (error) throw error;

    const contexto = agendamentos && agendamentos.length > 0 
      ? `Aqui est√£o os √∫ltimos agendamentos do usu√°rio para contexto:\n${agendamentos.map(a => `- ${a.data} ${a.horario}: ${a.nome} (${a.status})`).join('\n')}`
      : "O usu√°rio ainda n√£o tem agendamentos.";

    const resposta = await chamarDeepSeekIA(mensagem, contexto, "ECONOMICO"); // üí∞ USANDO ECON√îMICO

    res.json({
      success: true,
      resposta,
      agendamentos_referenciados: agendamentos?.length || 0
    });

  } catch (error) {
    console.error("Erro no assistente IA:", error);
    res.status(500).json({ 
      success: false, 
      msg: "Erro ao processar pergunta com IA",
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// ==================== ROTA SUGERIR HOR√ÅRIOS ====================

// Rota para sugerir hor√°rios livres
app.get("/api/sugerir-horarios", authMiddleware, async (req, res) => {
    try {
        const userEmail = req.user.email;

        // Busca todos os agendamentos
        const { data: agendamentos, error } = await supabase
            .from("agendamentos")
            .select("*")
            .eq("cliente", req.userId)
            .gte("data", new Date().toISOString().split('T')[0]) // S√≥ futuros
            .order("data", { ascending: true })
            .order("horario", { ascending: true });

        if (error) throw error;

        // An√°lise inteligente com IA
        const sugestoes = await analisarHorariosLivres(agendamentos || [], userEmail);

        res.json({
            success: true,
            sugestoes: sugestoes,
            total_agendamentos: agendamentos?.length || 0
        });

    } catch (error) {
        console.error("Erro ao sugerir hor√°rios:", error);
        res.status(500).json({ 
            success: false, 
            msg: "Erro ao analisar hor√°rios livres",
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

// Fun√ß√£o para analisar hor√°rios livres
async function analisarHorariosLivres(agendamentos, userEmail) {
    try {
        const contexto = `
AN√ÅLISE DE AGENDA - SUGERIR HOR√ÅRIOS LIVRES

Dados da agenda do usu√°rio ${req.userId}:

AGENDAMENTOS EXISTENTES (pr√≥ximos 7 dias):
${agendamentos.length > 0 ? 
    agendamentos.map(a => `- ${a.data} ${a.horario}: ${a.nome}`).join('\n') 
    : 'Nenhum agendamento futuro encontrado.'
}

DATA ATUAL: ${new Date().toISOString().split('T')[0]}

INSTRU√á√ïES:
Analise a agenda acima e sugira os MELHORES hor√°rios livres para os pr√≥ximos 7 dias.
Considere:
- Hor√°rios comerciais (9h-18h)
- Evitar in√≠cio/fim de dia
- Espa√ßamento entre compromissos
- Balancear dias da semana

FORMATO DA RESPOSTA:
Forne√ßa uma lista de 3-5 sugest√µes de hor√°rios no formato:
"üìÖ [DIA] √†s [HOR√ÅRIO] - [CONTEXTO/SUGEST√ÉO]"

Exemplo:
"üìÖ Segunda-feira √†s 14:00 - Per√≠odo da tarde, bom para reuni√µes
üìÖ Quarta-feira √†s 10:30 - Hor√°rio produtivo para trabalho focado"

Seja pr√°tico, √∫til e use emojis. M√°ximo de 150 palavras.
`;

        // No backend, na fun√ß√£o analisarHorariosLivres:
return await chamarDeepSeekIA("Analise esta agenda e sugira os melhores hor√°rios livres:", contexto, "ECONOMICO");
    } catch (error) {
        console.error("Erro na an√°lise de hor√°rios:", error);
        return "üìÖ **Sugest√µes de Hor√°rios:**\n\n- Segunda-feira: 14h-16h (tarde)\n- Quarta-feira: 10h-12h (manh√£)\n- Sexta-feira: 15h-17h (final de semana pr√≥ximo)\n\nüí° **Dica:** Estes s√£o hor√°rios typically produtivos com boa disponibilidade.";
    }
}

// Rota de sugest√µes inteligentes
app.get("/api/sugestoes-inteligentes", authMiddleware, async (req, res) => {
  try {
    const userEmail = req.user.email;
    const cacheKey = `sugestoes_${req.userId}`;

    const resultado = await cacheManager.getOrSet(cacheKey, async () => {
      // Busca todos os agendamentos
      const { data: agendamentos, error } = await supabase
        .from("agendamentos")
        .select("*")
        .eq("cliente", req.userId)
        .order("data", { ascending: true });


      if (error) throw error;

      if (!agendamentos || agendamentos.length === 0) {
        return {
          sugestoes: "üìù Voc√™ ainda n√£o tem agendamentos. Que tal agendar seu primeiro compromisso? Use o agendamento por IA para facilitar!",
          total_agendamentos: 0
        };
      }

      const sugestoes = await gerarSugestoesInteligentes(agendamentos, userEmail);

      return {
        sugestoes,
        total_agendamentos: agendamentos.length
      };
    }, 10 * 60 * 1000); // Cache de 10 minutos para sugest√µes

    res.json({
      success: true,
      ...resultado
    });

  } catch (error) {
    console.error("Erro nas sugest√µes inteligentes:", error);
    res.status(500).json({ 
      success: false, 
      msg: "Erro ao gerar sugest√µes inteligentes",
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// Rota de estat√≠sticas pessoais com IA
app.get("/api/estatisticas-pessoais", authMiddleware, async (req, res) => {
  try {
    const userEmail = req.user.email;
    const cacheKey = `estatisticas_${req.userId}`;

    const resultado = await cacheManager.getOrSet(cacheKey, async () => {
      // Busca todos os agendamentos
      const { data: agendamentos, error } = await supabase
        .from("agendamentos")
        .select("*")
        .eq("cliente", req.userId);

      if (error) throw error;

      return await analisarEstatisticasPessoais(agendamentos || [], userEmail);
    }, 5 * 60 * 1000); // Cache de 5 minutos para estat√≠sticas

    res.json({
      success: true,
      ...resultado
    });

  } catch (error) {
    console.error("Erro nas estat√≠sticas pessoais:", error);
    res.status(500).json({ 
      success: false, 
      msg: "Erro ao gerar estat√≠sticas pessoais",
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});


const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

let creds;
try {
  creds = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT);
} catch (e) {
  console.error("Erro ao parsear GOOGLE_SERVICE_ACCOUNT:", e);
  process.exit(1);
}
// ADICIONE ESTA FUN√á√ÉO ANTES DAS ROTAS IA:
async function gerarSugestoesInteligentes(agendamentos, userEmail) {
  try {
    const contexto = `
AN√ÅLISE DE AGENDA PARA SUGEST√ïES INTELIGENTES

Agendamentos do usu√°rio ${req.userId}:
${agendamentos.map(a => `- ${a.data} ${a.horario}: ${a.nome} (${a.status})`).join('\n')}

Forne√ßa insights √∫teis sobre:
- Padr√µes de agendamento
- Sugest√µes de melhor organiza√ß√£o
- Lembretes importantes
- Otimiza√ß√µes de tempo

Seja pr√°tico e use emojis. M√°ximo 150 palavras.
`;

    return await chamarDeepSeekIA("Analise esta agenda e forne√ßa sugest√µes √∫teis:", contexto, "ECONOMICO");
  } catch (error) {
    console.error("Erro ao gerar sugest√µes:", error);
    return "üí° **Sugest√µes Inteligentes:**\n\n- Considere agendar compromissos importantes no per√≠odo da manh√£\n- Mantenha intervalos de 15-30 minutos entre reuni√µes\n- Revise sua agenda semanalmente para ajustes\n\nüìä Dica: Use o agendamento por IA para otimizar seu tempo!";
  }
}
async function accessUserSpreadsheet(userEmail, userMetadata) {
  try {
    const spreadsheetId = userMetadata?.spreadsheet_id;
    
    if (!spreadsheetId) {
      console.log(`üìù Usu√°rio ${userEmail} n√£o configurou Sheets`); // ‚úÖ Use userEmail
      return null;
    }
    
    const doc = new GoogleSpreadsheet(spreadsheetId);
    await doc.useServiceAccountAuth(creds);
    await doc.loadInfo();
    
    console.log(`‚úÖ Acessando planilha do usu√°rio: ${userEmail}`); // ‚úÖ Use userEmail
    return doc;
  } catch (error) {
    console.error(`‚ùå Erro ao acessar planilha do usu√°rio ${userEmail}:`, error.message); // ‚úÖ Use userEmail
    return null;
  }
}

async function createSpreadsheetForUser(userEmail, userName) {
  try {
    console.log('üîß Iniciando cria√ß√£o de planilha para:', userEmail);
    
    const doc = new GoogleSpreadsheet();
    await doc.useServiceAccountAuth(creds);
    
    await doc.createNewSpreadsheetDocument({
      title: `Agendamentos - ${userName || userEmail}`.substring(0, 100),
    });
    
    console.log('üìä Planilha criada, ID:', doc.spreadsheetId);
    
    const sheet = doc.sheetsByIndex[0];
    await sheet.setHeaderRow([
      'id', 'nome', 'email', 'telefone', 'data', 'horario', 'status', 'confirmado', 'created_at', 'descricao'
    ]);
    
    try {
      await doc.shareWithEmail(userEmail, {
        role: 'writer',
        emailMessage: 'Planilha de agendamentos compartilhada com voc√™!'
      });
      console.log('‚úÖ Planilha compartilhada com:', userEmail);
    } catch (shareError) {
      console.warn('‚ö†Ô∏è N√£o foi poss√≠vel compartilhar a planilha:', shareError.message);
    }
    
    console.log(`üìä Nova planilha criada para ${userEmail}: ${doc.spreadsheetId}`); // ‚úÖ Use userEmail
    return doc.spreadsheetId;
    
  } catch (error) {
    console.error("‚ùå Erro ao criar planilha:", error);
    throw new Error(`Falha ao criar planilha: ${error.message}`);
  }
}

async function ensureDynamicHeaders(sheet, newKeys) {
  await sheet.loadHeaderRow().catch(async () => await sheet.setHeaderRow(newKeys));
  const currentHeaders = sheet.headerValues || [];
  const headersToAdd = newKeys.filter((k) => !currentHeaders.includes(k));
  if (headersToAdd.length > 0) {
    await sheet.setHeaderRow([...currentHeaders, ...headersToAdd]);
  }
}

async function updateRowInSheet(sheet, rowId, updatedData) {
  if (!sheet) return;
  
  await sheet.loadHeaderRow();
  const rows = await sheet.getRows();
  const row = rows.find(r => r.id === rowId);
  if (row) {
    Object.keys(updatedData).forEach(key => {
      if (sheet.headerValues.includes(key)) row[key] = updatedData[key];
    });
    await row.save();
  } else {
    await ensureDynamicHeaders(sheet, Object.keys(updatedData));
    await sheet.addRow(updatedData);
  }
}

// ---------------- MIDDLEWARE AUTH ----------------
async function authMiddleware(req, res, next) {
  const token = req.headers["authorization"]?.split("Bearer ")[1];
  if (!token) return res.status(401).json({ msg: "Token n√£o enviado" });

  const { data, error } = await supabase.auth.getUser(token);
  if (error || !data.user) return res.status(401).json({ msg: "Token inv√°lido" });

  req.user = data.user;
  req.userId = data.user.id;
  next();
}

// ==================== HEALTH CHECKS OTIMIZADOS ====================
app.get("/health", (req, res) => {
  res.json({ 
    status: "OK", 
    message: "Backend rodando com otimiza√ß√µes e IA",
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    ia_configurada: !!DEEPSEEK_API_KEY
  });
});

// Novo endpoint para warm-up (para o teu ping)
app.get("/warmup", async (req, res) => {
  try {
    const { data, error } = await supabase.from('agendamentos').select('count').limit(1);
    
    res.json({ 
      status: "WARM", 
      timestamp: new Date().toISOString(),
      supabase: error ? "offline" : "online",
      ia: DEEPSEEK_API_KEY ? "configurada" : "n√£o configurada"
    });
  } catch (error) {
    res.json({ 
      status: "COLD", 
      timestamp: new Date().toISOString(),
      error: error.message 
    });
  }
});

// ==================== ROTAS COM CACHE CORRIGIDAS ====================

// üî• AGENDAMENTOS COM CACHE
app.get("/agendamentos", authMiddleware, async (req, res) => {
  try {
    const userEmail = req.user.email;
    const cacheKey = `agendamentos_${req.userId}`;
    
    const agendamentos = await cacheManager.getOrSet(cacheKey, async () => {
      console.log('üîÑ Buscando agendamentos do DB para:', userEmail);
      const { data, error } = await supabase
        .from("agendamentos")
        .select("*")
       .eq("cliente", req.userId)
        .order("data", { ascending: true })
        .order("horario", { ascending: true });

      if (error) throw error;
      return data;
    });

    res.json({ agendamentos });
  } catch (err) {
    console.error("Erro ao listar agendamentos:", err);
    res.status(500).json({ msg: "Erro interno" });
  }
});

// üî• CONFIGURA√á√ÉO SHEETS COM CACHE
app.get("/configuracao-sheets", authMiddleware, async (req, res) => {
  try {
    const userEmail = req.user.email;
    const cacheKey = `config_${req.userId}`;
    
    const config = await cacheManager.getOrSet(cacheKey, async () => {
      return {
        temSheetsConfigurado: !!req.user.user_metadata?.spreadsheet_id,
        spreadsheetId: req.user.user_metadata?.spreadsheet_id
      };
    }, 5 * 60 * 1000);
    
    console.log(`üìä Configura√ß√£o do usu√°rio ${req.userId}:`, config);
    res.json(config);
    
  } catch (err) {
    console.error("Erro ao verificar configura√ß√£o:", err);
    res.status(500).json({ msg: "Erro interno" });
  }
});

// üî• CONFIGURAR SHEETS COM INVALIDA√á√ÉO DE CACHE
app.post("/configurar-sheets", authMiddleware, async (req, res) => {
  try {
    const { spreadsheetId, criarAutomatico } = req.body;
    const userEmail = req.user.email;
    
    console.log('üîß Configurando Sheets para:', userEmail, { spreadsheetId, criarAutomatico });
    
    let finalSpreadsheetId = spreadsheetId;

    if (criarAutomatico) {
      console.log('üîß Criando planilha autom√°tica para:', userEmail);
      finalSpreadsheetId = await createSpreadsheetForUser(userEmail, req.user.user_metadata?.name);
      console.log('‚úÖ Planilha criada com ID:', finalSpreadsheetId);
    }

    if (!finalSpreadsheetId) {
      return res.status(400).json({ msg: "Spreadsheet ID √© obrigat√≥rio" });
    }

    try {
      console.log('üîß Verificando acesso √† planilha:', finalSpreadsheetId);
      const doc = new GoogleSpreadsheet(finalSpreadsheetId);
      await doc.useServiceAccountAuth(creds);
      await doc.loadInfo();
      console.log('‚úÖ Planilha acess√≠vel:', doc.title);
    } catch (accessError) {
      console.error('‚ùå Erro ao acessar planilha:', accessError.message);
      return res.status(400).json({ 
        msg: "N√£o foi poss√≠vel acessar a planilha. Verifique o ID e as permiss√µes." 
      });
    }

    const { data: updatedUser, error: updateError } = await supabase.auth.admin.updateUserById(
      req.user.id,
      { 
        user_metadata: { 
          ...req.user.user_metadata,
          spreadsheet_id: finalSpreadsheetId 
        } 
      }
    );

    if (updateError) {
      console.error('‚ùå Erro ao atualizar usu√°rio:', updateError);
      throw updateError;
    }

    console.log('‚úÖ Usu√°rio atualizado com sucesso:', updatedUser.user.email);
    
    // üî• INVALIDA CACHE CORRETAMENTE
    cacheManager.delete(`config_${req.userId}`);
    cacheManager.delete(`agendamentos_${req.userId}`);
    
    console.log('‚úÖ Sheets configurado com sucesso para:', userEmail);
    
    res.json({ 
      msg: criarAutomatico ? "‚úÖ Planilha criada e configurada com sucesso!" : "‚úÖ Spreadsheet configurado com sucesso!",
      spreadsheetId: finalSpreadsheetId
    });

  } catch (err) {
    console.error("‚ùå Erro ao configurar sheets:", err);
    res.status(500).json({ 
      msg: "Erro interno do servidor",
      details: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
});
// üî• FUN√á√ÉO AUXILIAR: Verifica se usu√°rio pode gerenciar agendamento
function usuarioPodeGerenciarAgendamento(agendamento, userId) {
  // ‚úÖ Pode gerenciar se:
  // 1. √â o dono do agendamento (cliente) OU
  // 2. √â o dono do link que criou o agendamento (user_id) OU  
  // 3. √â um administrador (se quiser implementar depois)
  return agendamento.cliente === userId || 
         agendamento.user_id === userId;
}
// üî• AGENDAR COM CACHE E INVALIDA√á√ÉO
app.post("/agendar", authMiddleware, async (req, res) => {
  try {
    const { Nome, Email, Telefone, Data, Horario } = req.body;
    if (!Nome || !Email || !Telefone || !Data || !Horario)
      return res.status(400).json({ msg: "Todos os campos obrigat√≥rios" });

    const userEmail = req.user.email;
    const cacheKey = `agendamentos_${req.userId}`;
    
    // ‚úÖ PRIMEIRO VERIFICA CONFLITOS USANDO CACHE
    const agendamentosExistentes = await cacheManager.getOrSet(cacheKey, async () => {
      const { data, error } = await supabase
        .from("agendamentos")
        .select("*")
        .eq("cliente", req.userId)
        .order("data", { ascending: true })
        .order("horario", { ascending: true });

      if (error) throw error;
      return data || [];
    });

    // Verifica conflito usando dados em cache
    const conflito = agendamentosExistentes.find(a => 
      a.data === Data && a.horario === Horario
    );
    
    if (conflito) {
      return res.status(400).json({ 
        msg: "Voc√™ j√° possui um agendamento para esta data e hor√°rio" 
      });
    }

    // Se n√£o h√° conflito, cria o agendamento
   const { data: novoAgendamento, error } = await supabase
  .from("agendamentos")
  .insert([{
    cliente: req.userId, // ‚úÖ CORRETO (UUID)
    user_id: req.userId, // ‚úÖ ADICIONE TAMB√âM
    nome: Nome,
    email: userEmail,
    telefone: Telefone,
    data: Data,
    horario: Horario,
    status: "pendente",
    confirmado: false,
  }])
      .select()
      .single();

    if (error) throw error;

    try {
      const doc = await accessUserSpreadsheet(userEmail, req.user.user_metadata);
      if (doc) {
        const sheet = doc.sheetsByIndex[0];
        await ensureDynamicHeaders(sheet, Object.keys(novoAgendamento));
        await sheet.addRow(novoAgendamento);
        console.log(`‚úÖ Agendamento salvo na planilha do usu√°rio ${req.userId}`);
      }
    } catch (sheetError) {
      console.error("Erro ao atualizar Google Sheets:", sheetError);
    }

    // üî• INVALIDA CACHE PARA FOR√áAR ATUALIZA√á√ÉO
    cacheManager.delete(cacheKey);
    
    res.json({ msg: "Agendamento realizado com sucesso!", agendamento: novoAgendamento });

  } catch (err) {
    console.error("Erro no /agendar:", err);
    res.status(500).json({ msg: "Erro interno no servidor" });
  }
});

// üî• CONFIRMAR AGENDAMENTO CORRIGIDO
app.post("/agendamentos/:email/confirmar/:id", authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const userEmail = req.user.email;
    
    console.log('‚úÖ Confirmando agendamento ID:', id, 'por usu√°rio:', userEmail, 'userId:', req.userId);

    // ‚úÖ BUSCA O AGENDAMENTO SEM FILTRAR POR CLIENTE
    const { data: agendamento, error: fetchError } = await supabase
      .from("agendamentos")
      .select("*")
      .eq("id", id)
      .single();

    if (fetchError || !agendamento) {
      return res.status(404).json({ msg: "Agendamento n√£o encontrado" });
    }

    console.log('üìã Agendamento encontrado:', {
      id: agendamento.id,
      cliente: agendamento.cliente,
      user_id: agendamento.user_id,
      nome: agendamento.nome
    });

    // ‚úÖ VERIFICA SE USU√ÅRIO TEM PERMISS√ÉO
    if (!usuarioPodeGerenciarAgendamento(agendamento, req.userId)) {
      return res.status(403).json({ 
        msg: "Voc√™ n√£o tem permiss√£o para confirmar este agendamento" 
      });
    }

    // ‚úÖ ATUALIZA SEM FILTRAR POR CLIENTE (j√° verificamos permiss√£o)
    const { data, error } = await supabase.from("agendamentos")
      .update({ 
        confirmado: true, 
        status: "confirmado",
        confirmado_por: req.userId // Registra quem confirmou
      })
      .eq("id", id)
      .select()
      .single();
    
    if (error) throw error;
    if (!data) return res.status(404).json({ msg: "Agendamento n√£o encontrado" });

    // Atualiza Google Sheets
    try {
      const doc = await accessUserSpreadsheet(userEmail, req.user.user_metadata);
      if (doc) {
        await updateRowInSheet(doc.sheetsByIndex[0], id, data);
      }
    } catch (sheetError) {
      console.error("Erro ao atualizar Google Sheets:", sheetError);
    }

    // üî• INVALIDA CACHE DE AMBOS OS USU√ÅRIOS
    cacheManager.delete(`agendamentos_${req.userId}`);
    if (agendamento.cliente && agendamento.cliente !== req.userId) {
      cacheManager.delete(`agendamentos_${agendamento.cliente}`);
    }
    
    res.json({ 
      msg: "Agendamento confirmado com sucesso!", 
      agendamento: data 
    });
  } catch (err) {
    console.error("Erro ao confirmar agendamento:", err);
    res.status(500).json({ msg: "Erro interno" });
  }
});


// üî• CANCELAR AGENDAMENTO CORRIGIDO
app.post("/agendamentos/:email/cancelar/:id", authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const userEmail = req.user.email;
    
    console.log('‚ùå Cancelando agendamento ID:', id, 'por usu√°rio:', userEmail, 'userId:', req.userId);

    // ‚úÖ BUSCA O AGENDAMENTO SEM FILTRAR POR CLIENTE
    const { data: agendamento, error: fetchError } = await supabase
      .from("agendamentos")
      .select("*")
      .eq("id", id)
      .single();

    if (fetchError || !agendamento) {
      return res.status(404).json({ msg: "Agendamento n√£o encontrado" });
    }

    console.log('üìã Agendamento encontrado:', {
      id: agendamento.id,
      cliente: agendamento.cliente,
      user_id: agendamento.user_id,
      nome: agendamento.nome
    });

    // ‚úÖ VERIFICA SE USU√ÅRIO TEM PERMISS√ÉO
    if (!usuarioPodeGerenciarAgendamento(agendamento, req.userId)) {
      return res.status(403).json({ 
        msg: "Voc√™ n√£o tem permiss√£o para cancelar este agendamento" 
      });
    }

    // ‚úÖ ATUALIZA SEM FILTRAR POR CLIENTE (j√° verificamos permiss√£o)
    const { data, error } = await supabase.from("agendamentos")
      .update({ 
        status: "cancelado", 
        confirmado: false,
        cancelado_por: req.userId // Registra quem cancelou
      })
      .eq("id", id)
      .select()
      .single();
    
    if (error) throw error;
    if (!data) return res.status(404).json({ msg: "Agendamento n√£o encontrado" });

    // Atualiza Google Sheets
    try {
      const doc = await accessUserSpreadsheet(userEmail, req.user.user_metadata);
      if (doc) {
        await updateRowInSheet(doc.sheetsByIndex[0], id, data);
      }
    } catch (sheetError) {
      console.error("Erro ao atualizar Google Sheets:", sheetError);
    }

    // üî• INVALIDA CACHE DE AMBOS OS USU√ÅRIOS
    cacheManager.delete(`agendamentos_${req.userId}`);
    if (agendamento.cliente && agendamento.cliente !== req.userId) {
      cacheManager.delete(`agendamentos_${agendamento.cliente}`);
    }
    
    res.json({ 
      msg: "Agendamento cancelado com sucesso!", 
      agendamento: data 
    });
  } catch (err) {
    console.error("Erro ao cancelar agendamento:", err);
    res.status(500).json({ msg: "Erro interno" });
  }
});


// üî• REAGENDAR AGENDAMENTO CORRIGIDO
app.post("/agendamentos/:email/reagendar/:id", authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const { novaData, novoHorario } = req.body;
    const userEmail = req.user.email;
    
    if (!novaData || !novoHorario) return res.status(400).json({ msg: "Data e hor√°rio obrigat√≥rios" });

    console.log('üîÑ Reagendando agendamento ID:', id, 'por usu√°rio:', userEmail, 'userId:', req.userId);

    // ‚úÖ BUSCA O AGENDAMENTO SEM FILTRAR POR CLIENTE
    const { data: agendamento, error: fetchError } = await supabase
      .from("agendamentos")
      .select("*")
      .eq("id", id)
      .single();

    if (fetchError || !agendamento) {
      return res.status(404).json({ msg: "Agendamento n√£o encontrado" });
    }

    // ‚úÖ VERIFICA SE USU√ÅRIO TEM PERMISS√ÉO
    if (!usuarioPodeGerenciarAgendamento(agendamento, req.userId)) {
      return res.status(403).json({ 
        msg: "Voc√™ n√£o tem permiss√£o para reagendar este agendamento" 
      });
    }

    // Verifica conflito com novo hor√°rio (excluindo o pr√≥prio agendamento)
    const conflito = agendamentos.find(a => 
      a.id != id && a.data === novaData && a.horario === novoHorario
    );
    
    if (conflito) {
      return res.status(400).json({ 
        msg: "Voc√™ j√° possui um agendamento para esta nova data e hor√°rio" 
      });
    }

    // Se n√£o h√° conflito, atualiza no banco
    const { data, error } = await supabase.from("agendamentos")
      .update({ 
        data: novaData, 
        horario: novoHorario,
        status: "pendente",
        confirmado: false
      })
      .eq("id", id)
      .eq("cliente", req.userId)
      .select()
      .single();
    
    if (error) throw error;

    try {
      const doc = await accessUserSpreadsheet(userEmail, req.user.user_metadata);
      if (doc) {
        await updateRowInSheet(doc.sheetsByIndex[0], id, data);
      }
    } catch (sheetError) {
      console.error("Erro ao atualizar Google Sheets:", sheetError);
    }

    // üî• INVALIDA CACHE PARA FOR√áAR ATUALIZA√á√ÉO
    cacheManager.delete(cacheKey);
    
    res.json({ msg: "Agendamento reagendado com sucesso", agendamento: data });
  } catch (err) {
    console.error("Erro ao reagendar:", err);
    res.status(500).json({ msg: "Erro interno" });
  }
});

// ---------------- Error Handling ----------------
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ msg: "Algo deu errado!" });
});

app.use("*", (req, res) => {
  res.status(404).json({ msg: "Endpoint n√£o encontrado" });
});

app.listen(PORT, () => {
  console.log(`üöÄ Backend otimizado rodando na porta ${PORT}`);
  console.log('‚úÖ Cache em mem√≥ria ativo');
  console.log('‚úÖ Health checks otimizados');
  console.log('ü§ñ DeepSeek IA: ' + (DEEPSEEK_API_KEY ? 'CONFIGURADA' : 'N√ÉO CONFIGURADA'));
  console.log('üìä Use /health para status completo');
  console.log('üî• Use /warmup para manter inst√¢ncia ativa');
});


















